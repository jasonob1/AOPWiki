library("aop")
library(graph)
library(igraph)
library(readr)
library(ggplot2)
library(rgl)
library(plotrix)
workingDir <-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" #EPA Dir
# workingDir<- "C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" #Personal Dir
setwd(workingDir)
#ARMimport<- "data/Aromatase network.txt"
#THYimport<- "data/Thyroid network.txt"
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
#KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#### AOP: Import and format network ####
# Name the AOP network
AOP.name<-"Thyroid"
# Specify import files (loads from working directory)
importnetwork<-"data/thyroid_AOP.cyjs"
importnetattr<-"data/thyroid_AOP_data.csv"
#Import network as cytoscape object and turn in aop object
#stea_aop <- convert_cytoscape_to_aop("//aa.ad.epa.gov/ORD/DUL/USERS/NPollesc/Net MyDocuments/projects/Pellston_2017/Ed_Anze/Programs/steatosis/Steatosis_AOP/steatosis.cyjs")
AOP_net<-convert_cytoscape_to_aop(paste(workingDir,importnetwork,sep=""))
#Import additional data exported from cytoscape, including node names and event types
#stea_info <- read_csv("//aa.ad.epa.gov/ORD/DUL/USERS/NPollesc/Net MyDocuments/projects/Pellston_2017/Ed_Anze/Programs/steatosis/Steatosis_AOP/stea_nodes.csv")
AOP_data<- read_csv(paste(workingDir,importnetattr,sep=""))
#convert aop object to graphNEL object
AOP_graph <- convert_aop_to_graph(AOP_net)
#convert graphNEL object to igraph object for analysis using igraph package
AOP<-igraph.from.graphNEL(AOP_graph, name = TRUE, weight = TRUE,
unlist.attrs = TRUE)
## ASSIGN NAMES, ATTRIBUTES, and NODE COLORS BY KED
# Assigning names can be tricky, since it depends on how cytoscape exports the network .json file
# V(AOP)names were imported as 'SUID', not 'name', this tells how to match the entries in table_node to the entries in sg graph object by SUID
match(as.character(AOP_data$SUID),V(AOP)$name)
# Assign names to igraph object (note that somehow the node names in V(sg)$name are in descending order, so 'rev' is needed to map actual names properly)
V(AOP)$name<-AOP_data$name[match(V(AOP)$name,as.character(AOP_data$SUID))]
# Assign key event descriptor types (MIE,AO,KE,etc...) And color MIE and AO
V(AOP)$ked<-AOP_data$`Event Type`[match(V(AOP)$name,as.character(AOP_data$name))]
E(AOP)$color<-"gray"
V(AOP)$color<-"Yellow"
V(AOP)$color[which(V(AOP)$ked=="MIE")]<-"Green"
V(AOP)$color[which(V(AOP)$ked=="AO")]<-"Red"
dev.off()
set.seed(2)
plot(AOP, edge.arrow.size=.25, edge.curved=.1, vertex.size=10, main=paste(AOP.name,"AOP Network"),layout=layout.davidson.harel(AOP), vertex.label.cex=.75, vertex.label=NA, edge.curved=T )
legend('topleft',c("MIE","KE", "AO"), pch=22,
col="#777777",  pt.bg=c("Green","Yellow","Red"), pt.cex=2, cex=.8, bty="n", ncol=1)
View(lobo.layout)
library(igraph)
par(bg="black")
workingDir <-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" #EPA Dir
# workingDir<- "C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" #Personal Dir
setwd(workingDir)
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all_KEs_plus.txt"
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
##  Identify all unique KEs
allKEs<-c(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T)
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
V(AOPg)$name<-keID$KE
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,2]),1] # adds event ID number
V(AOPg)$AOP_ID<-KEPdata[match(V(AOPg)$KE_EID,KEPdata[,3]),1] # finds AOPID to add to V(AOPg) data
View(keID)
V(AOPg)$KE_EID
setwd(workingDir)
#ARMimport<- "data/Aromatase network.txt"
#THYimport<- "data/Thyroid network.txt"
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
#KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#### AOP: Import and format network ####
# Name the AOP network
AOP.name<-"Thyroid"
# Specify import files (loads from working directory)
importnetwork<-"data/thyroid_AOP.cyjs"
importnetattr<-"data/thyroid_AOP_data.csv"
#Import network as cytoscape object and turn in aop object
#stea_aop <- convert_cytoscape_to_aop("//aa.ad.epa.gov/ORD/DUL/USERS/NPollesc/Net MyDocuments/projects/Pellston_2017/Ed_Anze/Programs/steatosis/Steatosis_AOP/steatosis.cyjs")
AOP_net<-convert_cytoscape_to_aop(paste(workingDir,importnetwork,sep=""))
#Import additional data exported from cytoscape, including node names and event types
#stea_info <- read_csv("//aa.ad.epa.gov/ORD/DUL/USERS/NPollesc/Net MyDocuments/projects/Pellston_2017/Ed_Anze/Programs/steatosis/Steatosis_AOP/stea_nodes.csv")
AOP_data<- read_csv(paste(workingDir,importnetattr,sep=""))
#convert aop object to graphNEL object
AOP_graph <- convert_aop_to_graph(AOP_net)
#convert graphNEL object to igraph object for analysis using igraph package
AOP<-igraph.from.graphNEL(AOP_graph, name = TRUE, weight = TRUE,
unlist.attrs = TRUE)
## ASSIGN NAMES, ATTRIBUTES, and NODE COLORS BY KED
# Assigning names can be tricky, since it depends on how cytoscape exports the network .json file
# V(AOP)names were imported as 'SUID', not 'name', this tells how to match the entries in table_node to the entries in sg graph object by SUID
match(as.character(AOP_data$SUID),V(AOP)$name)
# Assign names to igraph object (note that somehow the node names in V(sg)$name are in descending order, so 'rev' is needed to map actual names properly)
V(AOP)$name<-AOP_data$name[match(V(AOP)$name,as.character(AOP_data$SUID))]
# Assign key event descriptor types (MIE,AO,KE,etc...) And color MIE and AO
V(AOP)$ked<-AOP_data$`Event Type`[match(V(AOP)$name,as.character(AOP_data$name))]
V(AOP)$KE_ID<-AOP_data$KE_ID[match(V(AOP)$name,as.character(AOP_data$name))]
V(AOP)$KE_ID
View(KEPdata)
V(AOP)$lobo<-KEPdata$Level.of.Organisation[match(V(AOP)$KE_ID,KEPdata$Event)]
V(AOP)$lobo
V(AOP)$KE_ID
is.na(V(AOP)$lobo)
which[is.na(V(AOP)$lobo)]
which(is.na(V(AOP)$lobo))
V(AOP)$name[which(is.na(V(AOP)$lobo))]
match(V(AOP)$KE_ID,KEPdata$Event)
V(AOP)$name[which(is.na(V(AOP)$lobo))]
V(AOP)$KE_ID[which(is.na(V(AOP)$lobo))]
tcols=rainbow(length(unique(V(AOP)$lobo))) #creates a color scheme for visualization
lobo_list=c("Molecular","Cellular","Tissue","Organ","Individual","Population","") #creates an ordering of biological organization
plot(AOPg, layout=lobo.layout(AOPg),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
plot(AOP, layout=lobo.layout(AOP),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
plot(AOP, layout=lobo.layout(AOP),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOP)$lobo_col)
View(lobo.layout)
V(AOP)$lobo_col<-tcols[V(AOPg)$lobo_o]
plot(AOP, layout=lobo.layout(AOP),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOP)$lobo_col)
lobo.layout(AOP)
if(is.na(V(AOP)$lobo),"")
if(is.na(V(AOP)$lobo))""
if(is.na(V(AOP)$lobo)) V(AOP)$lobo<-""
V(AOP)$lobo[which(is.na(V(AOP)$lobo)]<-""
lobo.layout(AOP)
plot(AOP, layout=lobo.layout(AOP),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOP)$lobo_col)
#~ Misc, notes, and tasks ####
#Create random DAGS
library(pcalg)
set.seed(101)
myDAG <- randomDAG(n = 12, prob= 0.2, lB = 0.1, uB = 1)
myDAGi<-igraph.from.graphNEL(myDAG)
dev.off()
plot(myDAGi)
#Create random graphs
g <- erdos.renyi.game(30, 2/30, dir=TRUE)
plot(g)
components(g, mode="strong")
V(g)$color<-cycle.color(g)[[1]]
cycle.color(g)
E(g)$color<-cycle.color(g)[[2]]
# betweenness values provide DESCRIBE
V(sg.cond)$btw<-betweenness(sg.cond,normalized=TRUE)
##create adjacency matrix
A_stea<-get.adjacency(sg)
AM_stea<-as.matrix(A_stea)
####~ Example: DAG, Cycles, and Condensation Maps of Random Graphs ####
#(A.1) generate random igraph object, call it 'g'
g <- erdos.renyi.game(50, 2/50, dir=TRUE)
#(A.2) test for cycles and plot
is.dag(g)
plot(g)
#(A.3) if cycles exist, highlight them using cycle.color() and plot
V(g)$color<-cycle.color(g)[[1]]
E(g)$color<-cycle.color(g)[[2]]
plot(g)
#(B.1) if condensation is desired, create map and condense graph
condense.map(g)
condense.graph(g,condense.map(g))
#(B.2) verify that new graph is DAG and plot
is.dag(g.cond)
plot(g.cond)
#### EXAMPLE TOPOLOGICAL SORT FOR WG1 - PAPER ####
r1<-c(0,1,1,0,0)
r2<-c(0,0,0,1,0)
r3<-c(0,0,0,1,1)
r4<-c(0,0,0,0,1)
r5<-c(0,0,0,0,0)
#  Row bind the row vectors to create matrix
adjmat<-rbind(r1,r2,r3,r4,r5)
#  Look at adjacency matrix
adjmat
ga<-graph_from_adjacency_matrix(adjmat)
V(ga)$name<-c("A","B","C","D","E")
plot(ga, layout=layout_as_tree, vertex.size=30)
plot(ga, layout=topo.layout(ga), vertex.size=30)
r1<-c(0,1,1,0,0)
r2<-c(0,0,0,1,0)
r3<-c(0,0,0,1,1)
r4<-c(0,0,0,0,1)
r5<-c(0,0,0,0,0)
#  Row bind the row vectors to create matrix
adjmat<-rbind(r1,r2,r3,r4,r5)
#  Look at adjacency matrix
adjmat
gb<-graph_from_adjacency_matrix(adjmat)
V(gb)$name<-c("A","B","C","D","E")
plot(gb, layout=layout_as_tree, vertex.size=30)
plot(ga, layout=topo.layout(ga), edge.curved=TRUE, vertex.size=30)
V(AOP)[which(is.na(V(AOP)$lobo))]$lobo<-""
lobo.layout(AOP)
V(AOP)$lobo<-KEPdata$Level.of.Organisation[match(V(AOP)$KE_ID,KEPdata$Event)]
V(AOP)$KE_ID
V(AOP)$KE_ID[which(is.na(V(AOP)$lobo))]
match(V(AOP)$KE_ID,KEPdata$Event)
which(is.na(V(AOP)$lobo))
V(AOP)$lobo[which(is.na(V(AOP)$lobo))]<-""
lobo.layout(AOP)
plot(AOP, layout=lobo.layout(AOP),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOP)$lobo_col)
lobo_list=c("Molecular","Cellular","Tissue","Organ","Individual","Population","") #creates an ordering of biological organization
V(AOP)$lobo[which(is.na(V(AOP)$lobo))]<-""
V(AOPg)$lobo_o<-match(V(AOPg)$lobo,lobo_list)
tcols=rainbow(length(unique(V(AOP)$lobo))) #creates a color scheme for visualization
V(AOP)$lobo_col<-tcols[V(AOPg)$lobo_o]
plot(AOP, layout=lobo.layout(AOP),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOP)$lobo_col)
V(AOP)$lobo_col
V(AOP)$lobo_col<-tcols[V(AOPg)$lobo_o]
V(AOP)$lobo_col
tcols=rainbow(length(unique(V(AOP)$lobo))) #creates a color scheme for visualization
V(AOP)$lobo_col<-tcols[V(AOPg)$lobo_o]
V(AOP)$lobo_col
V(AOP)$lobo_o<-match(V(AOP)$lobo,lobo_list)
tcols=rainbow(length(unique(V(AOP)$lobo))) #creates a color scheme for visualization
V(AOP)$lobo_col<-tcols[V(AOP)$lobo_o]
V(AOP)$lobo_col
plot(AOP, layout=lobo.layout(AOP),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOP)$lobo_col)
plot(AOP, layout=lobo.layout(AOP),vertex.size=5,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOP)$lobo_col)
plot(AOP, layout=lobo.layout(AOP),vertex.size=5,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=V(AOP)$name, vertex.color=V(AOP)$lobo_col)
plot(AOP, layout=lobo.layout(AOP),vertex.size=5,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=V(AOP)$KE_ID, vertex.color=V(AOP)$lobo_col)
par(bg="black")
plot(AOP, layout=lobo.layout(AOP),vertex.size=5,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=V(AOP)$KE_ID, vertex.color=V(AOP)$lobo_col)
library(igraph)
par(bg="black")
workingDir <-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" #EPA Dir
# workingDir<- "C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" #Personal Dir
setwd(workingDir)
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all_KEs_plus.txt"
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
##  Identify all unique KEs
allKEs<-c(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T)
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
V(AOPg)$name<-keID$KE
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,2]),1] # adds event ID number
V(AOPg)$AOP_ID<-KEPdata[match(V(AOPg)$KE_EID,KEPdata[,3]),1] # finds AOPID to add to V(AOPg) data
# This identifies which KEs are included in KERs, but are not themselves included in the KE event listings.
# V(AOPg)$KE_name[which(is.na(V(AOPg)$KE_EID))]
# Plot the AOP wiki, colored by AOP
#acols=topo.colors(length(unique(V(AOPg)$AOP_ID)))
acols=colorRampPalette(c("green","red","cyan","orange","magenta","yellow","blue"))
for(i in 1:length(unique(V(AOPg)$AOP_ID))){
V(AOPg)[which(V(AOPg)$AOP_ID==unique(V(AOPg)$AOP_ID)[i])]$acol<-acols(length(unique(V(AOPg)$AOP_ID)))[i]
}
par(bg="black",xpd=FALSE)
set.seed(1)
plot(AOPg,vertex.color=V(AOPg)$acol,vertex.label=NA, vertex.size=2, edge.arrow.size=.1)
#Calculates number of KE per unique AOP ID
AOP_freqs<-table(V(AOPg)$AOP_ID)
#Histogram of number of KE per unique AOP ID
hist(AOP_freqs,col.axis="white",xlab="# Key Events",ylab="Frequency",col.lab="white",col="white")
#Barplot of number of KE per unique AOP ID with red line to show mean
bp_wcc<-barplot(table(V(AOPg)$AOP_ID),col.axis="white", xlab="AOP ID",ylab="# Key Events",col.lab="white")
abline(h=mean(AOP_freqs),col="red")
#  TASK: WORK ON EDGE COLORING FOR AOP ID
#  edgecombcc<-expand.grid(V(gr)[which(comps$membership==ntcomps[i])],V(gr)[which(comps$membership==ntcomps[i])]) #creates a pairwise list of all nodes in the cc
#  edgecombflat<-as.vector(rbind(edgecombcc[[1]],edgecombcc[[2]])) #flattens the pairwise list to a vector where entries are read pairwise
#  edges.in.cc<-get.edge.ids(gr,edgecombflat,directed=TRUE)
#  E(gr)$color[edges.in.cc]<-cols[[i]]
#### CONNECTED COMPONENTS ANALYSIS ####
## Color vertices and edges by their weakly or strongly connected components.
V(AOPg)$cc_color<-unlist(color.comps(AOPg,"strong")$vcol)  #color.comps is a custom function stored in the AOP_net_functions.R file
E(AOPg)$cc_color<-unlist(color.comps(AOPg,"strong")$ecol)  #color.comps is a custom function stored in the AOP_net_functions.R file
# When the "strong" option is passed to color.comps, vsize and ewidth are calculated and can be used within plot
V(AOPg)$cc_size<-unlist(color.comps(AOPg,"strong")$vsize)
E(AOPg)$cc_width<-unlist(color.comps(AOPg,"strong")$ewidth)
# plot of connected components
par(bg="black")
set.seed(1)
plot(AOPg, vertex.size=V(AOPg)$cc_size, edge.width=E(AOPg)$cc_width, vertex.color=V(AOPg)$cc_color, edge.color=E(AOPg)$cc_color, edge.arrow.size=.1, vertex.label=NA)
## barplot for size of weakly connected components
wcomps<-components(AOPg,mode="weak")
wcc_freqs<-table(wcomps$csize)
bp_wcc<-barplot(table(wcomps$csize),col.axis="white", xlab="Component size",ylab="Frequency",col.lab="white")
# This points out how many of the feedback loops/cycles are contained within the same AOP and how many are a result of the network
scomps<-components(AOPg,mode="strong")
ntcomps<-which(scomps$csize>1) # non-trivial ccs (i.e. with more than 1 node)
V(AOPg)$scc<-scomps$membership # assign the attribute scc to nodes based on their membership
for(i in 1:length(ntcomps)){
print(V(AOPg)[which(V(AOPg)$scc==ntcomps[i])]$AOP_ID)
}
#### Level of biological organization plot ####
## Add level of biological organization for key event nodes
V(AOPg)$lobo<-KEdata[[4]][match(V(AOPg)$KE_name,KEdata[[2]])]
V(AOPg)$lobo[which(is.na(V(AOPg)$lobo))]<-"" #assigns blank to NA data
tcols=rainbow(length(unique(V(AOPg)$lobo))) #creates a color scheme for visualization
lobo_list=c("Molecular","Cellular","Tissue","Organ","Individual","Population","") #creates an ordering of biological organization
V(AOPg)$lobo_o<-match(V(AOPg)$lobo,lobo_list) #assigns a value of biological organization instead of string.  1=molecular, 2=cellular, ...
lobo_freqs<-table(V(AOPg)$lobo_o)
# a plot the AOP wiki using a standard left to right lobo layout.
plot(AOPg, layout=lobo.layout(AOPg),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
#legend('topright',c("Molecular","Cellular","Tissue","Organ","Individual","Population","Not Specified"), pch=22,
#       col="#777777", xjust=1,yjust=1, pt.bg=tcols, pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="black", text.col="white")
par(bg="black")
xx<- barplot(table(V(AOPg)$lobo_o), col=tcols, axes=F,names.arg=NA)
text(x=xx, y=10, label=lobo_freqs, cex=.75)
legend('topright',c("Molecular","Cellular","Tissue","Organ","Individual","Population","Not Specified"), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=tcols, pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="black", text.col="white")
#plot the AOP wiki by lobo info
V(AOPg)$lobo_col<-tcols[V(AOPg)$lobo_o]
set.seed(1)
plot(AOPg ,vertex.size=2, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
plot(AOPg, layout=lobo.layout(AOPg),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
#legend('topright',c("Molecular","Cellular","Tissue","Organ","Individual","Population","Not Specified"), pch=22,
#       col="#777777", xjust=1,yjust=1, pt.bg=tcols, pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="black", text.col="white")
