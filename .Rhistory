if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
x<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(x)>0){
path<-i*length(ao.list)-(length(ao.list)-j)
asp.list$path<-x}
}}
asp.all$aoplist[k]<-asp.list
}}
#return(asp.all)
}
aop.paths.all(AOPg)
aoplist<-sort(unique(V(AOPg)$AOP_ID))
aoplist<-aoplist[!is.na(aoplist)]
testlist<-list(aops=aoplist)
testlist
pathlist<-in.aop.paths(AOPg,7)
testlist<-c(testlist,pathlist)
testlist
aop.paths.all<-function(gr,aopatt=V(gr)$AOP_ID){
asp.all<-list()
aoplist<-sort(unique(aopatt))
aoplist<-aoplist[!is.na(aoplist)]
for(k in 1:length(aoplist)){
isg<-induced.subgraph(gr,V(gr)[which(aopatt==aoplist[k])])
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
asp.list<-list()
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
x<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(x)>0){
path<-i*length(ao.list)-(length(ao.list)-j)
asp.list$path<-x}
}}
asp.all<-c(asp.all,asp.list)
}}
#return(asp.all)
}
aop.paths.all(AOPg)
aop.paths.all<-function(gr,aopatt=V(gr)$AOP_ID){
asp.all<-list()
aoplist<-sort(unique(aopatt))
aoplist<-aoplist[!is.na(aoplist)]
for(k in 1:length(aoplist)){
isg<-induced.subgraph(gr,V(gr)[which(aopatt==aoplist[k])])
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
asp.list<-list()
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
x<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(x)>0){
path<-i*length(ao.list)-(length(ao.list)-j)
asp.list$path<-x}
}}
asp.all<<-c(asp.all,asp.list)
}}
return(asp.all)
}
aop.paths.all(AOPg)
asp.all
aop.paths.all<-function(gr,aopatt=V(gr)$AOP_ID){
asp.all<-list()
aoplist<-sort(unique(aopatt))
aoplist<-aoplist[!is.na(aoplist)]
for(k in 1:length(aoplist)){
isg<-induced.subgraph(gr,V(gr)[which(aopatt==aoplist[k])])
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
asp.list<-list()
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
x<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(x)>0){
path<-i*length(ao.list)-(length(ao.list)-j)
asp.list$path<-x}
}}
return(asp.list)
asp.all<<-c(asp.all,asp.list)
}}
return(asp.all)
}
aop.paths.all(AOPg)
la<-list(l1=107,l2=c(1,2,3,4))
la$l2
la$l2[[1]]
la$l2[[2]]<-10
la$l2
all_simple_paths(V(AOPg),from=1,to=10)
all_simple_paths(AOPg,from=1,to=10)
t<-all_simple_paths(AOPg,from=1,to=10)
t
t<-all_simple_paths(AOPg,from=1,to=20)
t
length(t)
t<-all_simple_paths(AOPg,from=1,to=4)
length(t)
aop.paths.all<-function(gr,aopatt=V(gr)$AOP_ID){
asp.all<-list()
aoplist<-sort(unique(aopatt))
aoplist<-aoplist[!is.na(aoplist)]
for(k in 1:length(aoplist)){
isg<-induced.subgraph(gr,V(gr)[which(aopatt==aoplist[k])])
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
asp.list<-list(aop=aoplist[k],paths=NULL)
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
x<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(x)>0){
index<-(i*length(ao.list)-(length(ao.list)-j))
asp.list$paths[index]<-x}
}}
asp.all<<-c(asp.all,asp.list)
}}
return(asp.all)
}
aop.paths.all(AOPg)
warnings()
asp.list<-list(aop=aoplist[k],paths=list())
aop.paths.all<-function(gr,aopatt=V(gr)$AOP_ID){
asp.all<-list()
aoplist<-sort(unique(aopatt))
aoplist<-aoplist[!is.na(aoplist)]
for(k in 1:length(aoplist)){
isg<-induced.subgraph(gr,V(gr)[which(aopatt==aoplist[k])])
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
asp.list<-list(aop=aoplist[k],paths=list())
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
x<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(x)>0){
index<-(i*length(ao.list)-(length(ao.list)-j))
asp.list$paths[index]<-x}
}}
asp.all<<-c(asp.all,asp.list)
}}
return(asp.all)
}
aop.paths.all(AOPg)
warnings()
aop.paths.all<-function(gr,aopatt=V(gr)$AOP_ID){
asp.all<-list()
aoplist<-sort(unique(aopatt))
aoplist<-aoplist[!is.na(aoplist)]
for(k in 1:length(aoplist)){
isg<-induced.subgraph(gr,V(gr)[which(aopatt==aoplist[k])])
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
asp.list<-list(aop=aoplist[k])
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
x<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(x)>0){
index<-(i*length(ao.list)-(length(ao.list)-j))
asp.list$index<-x}
}}
asp.all<<-c(asp.all,asp.list)
}}
return(asp.all)
}
aop.paths.all(AOPg)
View(asp.list)
out<-aop.paths.all(AOPg)
out
View(asp.all)
asp.all
asp.all$aop[207]
asp.all[which(asp.all$aop==207)]
asp.all$index[which(asp.all$aop==207)]
asp.all$1[which(asp.all$aop==207)]
aop.paths.all<-function(gr,aopatt=V(gr)$AOP_ID){
asp.all<-list()
aoplist<-sort(unique(aopatt))
aoplist<-aoplist[!is.na(aoplist)]
for(k in 1:length(aoplist)){
isg<-induced.subgraph(gr,V(gr)[which(aopatt==aoplist[k])])
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
asp.list<-list(aop=aoplist[k])
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
x<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(x)>0){
index<-as.numeric(i*length(ao.list)-(length(ao.list)-j))
asp.list$index<-x}
}}
asp.all<<-c(asp.all,asp.list)
}}
return(asp.all)
}
out<-aop.paths.all(AOPg)
View(out)
in.aop.paths<-function(gr,id,aopatt=V(gr)$AOP_ID, kedatt=V(isg)$KE_KED){
if(is.null(kedatt)){print("Error: No key event designation list supplied")}
else{
if(is.null(aopatt)){print("Error: No aop id designation list supplied")}
else{
isg<-induced.subgraph(gr,V(gr)[which(aopatt==id)])
mie.list<-V(isg)[which(kedatt=="MIE")]
ao.list<-V(isg)[which(kedatt=="AO")]
asp.list<-list()
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(asp_temp)>0)
asp.list[i*length(ao.list)-(length(ao.list)-j)]<-asp_temp
}}}
return(asp.list)
}
aop.paths.loop<-function(gr,aopatt=V(gr)$AOP_ID,kedatt=V(isg)$KE_KED){
aoplist<-sort(unique(aopatt))
aoplist<-aoplist[!is.na(aoplist)]
all.asp.list<-list(aops=c(),asps=list())
for(i in 1:length(aoplist)){
all.asp.list$aops<-aoplist[i]
all.asp.list$asps$aoplist[i]<-in.aop.paths(gr,id=aoplist[i])
}
aop.paths.loop(AOPg)
in.aop.paths<-function(gr,id,aopatt=V(gr)$AOP_ID, kedatt=V(isg)$KE_KED){
if(is.null(kedatt)){print("Error: No key event designation list supplied")}
else{
if(is.null(aopatt)){print("Error: No aop id designation list supplied")}
else{
isg<-induced.subgraph(gr,V(gr)[which(aopatt==id)])
mie.list<-V(isg)[which(kedatt=="MIE")]
ao.list<-V(isg)[which(kedatt=="AO")]
asp.list<-list()
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(asp_temp)>0){
asp.list[i*length(ao.list)-(length(ao.list)-j)]<-asp_temp}
}}}
return(asp.list)
}
in.aop.paths(AOPg,7)
in.aop.paths(AOPg,204)
in.aop.paths(AOPg,201)
in.aop.paths(AOPg,202)
in.aop.paths(AOPg,209)
aop.list
aoplist
in.aop.paths(AOPg,1)
in.aop.paths(AOPg,7)
in.aop.paths(AOPg,2)
in.aop.paths(AOPg,207)
in.aop.paths(AOPg,206)
in.aop.paths(AOPg,205)
in.aop.paths(AOPg,204)
in.aop.paths(AOPg,207)
in.aop.paths(AOPg,7)
for(i in 1:200){
in.aop.paths(AOPg,i)}
in.aop.paths(AOPg,2)
in.aop.paths(AOPg,3)
in.aop.paths(AOPg,4)
in.aop.paths(AOPg,5)
in.aop.paths(AOPg,6)
in.aop.paths(AOPg,7)
in.aop.paths(AOPg,8)
in.aop.paths(AOPg,9)
isg<-induced.subgraph(AOPg,V(AOPg)[which(V(AOPg)$AOP_ID==1)])
mie.list<-V(isg)[which(V(AOPg)$KE_KED=="MIE")]
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
mie.list
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
ao.list
plot(isg)
if(length(mie.list)>0 && length(ao.list)>0){print(T)}
if(length(mie.list)>0 && length(ao.list)=0)
if(length(mie.list)>0 && length(ao.list)==0)
if(length(mie.list)>0 && length(ao.list)==0){print(F)}
if(length(mie.list)>0 && length(ao.list)>0)
{for(i in 1:length(mie.list)){print(i)}}
if(length(mie.list)>0 && length(ao.list)>0)
{for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
print(paste(i,j,sep=","))
}
}}
if(length(mie.list)>0 && length(ao.list)>0)
{for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(mie.list)>0 && length(ao.list)>0)
{for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
}
}}
{for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
}
}}
{for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
}
}}
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
}
asd
asd}
asd})
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
}
}}
View(asp_temp)
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(asp_temp)>0){
x<-(i*length(ao.list)-(length(ao.list)-j))
asp.list[[x]]<-asp_temp
}
}}
View(asp.list)
asp.list<-list()
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(asp_temp)>0){
x<-(i*length(ao.list)-(length(ao.list)-j))
asp.list[[x]]<-asp_temp
}
}}
View(asp.list)
isg<-induced.subgraph(AOPg,V(AOPg)[which(V(AOPg)$AOP_ID==1)])
plot(isg)
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
mie.list
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
ao.list
asp.list<-list()
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(asp_temp)>0){
x<-(i*length(ao.list)-(length(ao.list)-j))
asp.list[[x]]<-asp_temp
}
}}
View(asp.list)
in.aop.paths<-function(gr,id){
isg<-induced.subgraph(gr,V(gr)[which(V(gr)$AOP_ID==id)])
mie.list<-V(isg)[which(V(isg)$KE_KED=="MIE")]
mie.list
ao.list<-V(isg)[which(V(isg)$KE_KED=="AO")]
ao.list
asp.list<-list()
if(length(mie.list)>0 && length(ao.list)>0){
for(i in 1:length(mie.list)){
for(j in 1:length(ao.list)){
asp_temp<-all_simple_paths(isg,from=as.numeric(mie.list[i]),to=as.numeric(ao.list[j]),mode="out")
if(length(asp_temp)>0){
x<-(i*length(ao.list)-(length(ao.list)-j))
asp.list[[x]]<-asp_temp
}
}}
return(asp.list)
}
in.aop.paths(AOPg,1)
in.aop.paths(AOPg,2)
in.aop.paths(AOPg,3)
in.aop.paths(AOPg,4)
in.aop.paths(AOPg,5)
in.aop.paths(AOPg,6)
aoplist<-sort(unique(V(AOPg)$AOP_ID))
aoplist<-aoplist[!is.na(aoplist)]
all.paths<-list()
for(i in aoplist){
all.paths[[i]]<-in.aop.paths(AOPg,i)
}
View(all.paths)
aoplist<-sort(unique(V(AOPg)$AOP_ID))
aoplist<-aoplist[!is.na(aoplist)]
all.paths<-list()
total.paths<-0
for(i in aoplist){
all.paths[[i]]<-in.aop.paths(AOPg,i)
total.paths<-total.paths+length(all.paths[[i]])
}
View(all.paths)
length(all.paths)
length(all.paths[[1]])
in.aop.paths.all<-function(gr,paths=F){
aoplist<-sort(unique(V(gr)$AOP_ID))
aoplist<-aoplist[!is.na(aoplist)]
all.paths<-list()
total.paths<-0
for(i in aoplist){
all.paths[[i]]<-in.aop.paths(gr,i)
total.paths<-total.paths+length(all.paths[[i]])
}
if(paths){return(all.paths)}
else{return(total.paths)}}
in.aop.paths.all(AOPg)
#### ~~~ Within AOP MIE to AO Simple Paths ####
in.aop.paths(AOPg,1)
in.aop.paths.all(AOPg)
in.aop.paths.all(AOPg,paths=T)
V(AOPg)[which(V(AOPg)$KE_KED=="MIE")]
V(AOPg)[which(V(AOPg)$KE_KED=="AO")]
mies<-V(AOPg)[which(V(AOPg)$KE_KED=="MIE")]
aos<-V(AOPg)[which(V(AOPg)$KE_KED=="AO")]
mies
mies$AOP_ID
aos$AOP_ID
matches<-0
for(i in 1:length(mies)){
for(j in 1:length(aos)){
if(mies[i]$AOP_ID==aos[j]$AOP_ID){
matches<-matches+1
}
mies[1]$AOP_ID
aos[1]$AOP_ID
matches<-0
for(i in 1:length(mies)){
for(j in 1:length(aos)){
mie_aop<-mies[i]$AOP_ID
ao_aop<-aos[j]$AOP_ID
if(mie_aop == aos_aop){
matches<-matches+1
}
matches<-0
for(i in 1:length(mies)){
for(j in 1:length(aos)){
mie_aop<-mies[i]$AOP_ID
ao_aop<-aos[j]$AOP_ID
if(mie_aop == ao_aop){
matches<-matches+1
}
str(mies[1]$AOP_ID)
str(aos[1]$AOP_ID)
intersect(mies$AOP_ID,aos$AOP_ID)
length(intersect(mies$AOP_ID,aos$AOP_ID))
intersect(intersect(mies$AOP_ID,aos$AOP_ID),V(AOPg)$AOP_ID)
unique(intersect(intersect(mies$AOP_ID,aos$AOP_ID),V(AOPg)$AOP_ID))
## This option of the in.aop.paths.all() function provides the paths instead
## of the total number of paths.
in.aop.paths.all(AOPg,paths=T)
V(AOPg)$AOP_ID
aops<-V(AOPg)$AOP_ID
aops<-aops[!is.na(aops)]
aops
length(aops)
length(V(AOPg)-length(aops))
length(mies)
length(aos)
## Create lists of all MIEs and all AOs, find the AOPs that have both in them
length(V(AOPg))
#The number of nodes with AOP IDs assigned
length(aops)
#The number of nodes with AOP IDs assigned
length(aops)
#The number of nodes without AOP IDs assigned
length(V(AOPg)-length(aops))
#The number of nodes without AOP IDs assigned
length(V(AOPg)-length(aops))
#The number of nodes without AOP IDs assigned
length(V(AOPg))-length(aops))
#The number of nodes without AOP IDs assigned
length(V(AOPg))-length(aops)
## Create lists of all MIEs and all AOs, find the AOPs that have both in them
length(V(AOPg))
#The number of nodes with AOP IDs assigned
length(aops)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Builds AOPwiki network from Edgelist with weights ##
KERWdata<-read.table(paste(workingDir, KERwoe, sep=""), sep="\t", stringsAsFactors=FALSE, header=T)
V(AOPg)$KE_EID
V(AOPg)[is.na(V(AOPg)$KE_EID)]
as.numeric(V(AOPg)[is.na(V(AOPg)$KE_EID)])
### AOP ID from AOPws
V(AOPws)$KE_KED<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))])
## Add KED data for MIE to AO analysis using weighted edges
V(AOPws)$KE_KED<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))])
V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
length(V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))])
## Add key event designation data
V(AOPg)$KE_KED<-KEKdata[match(V(AOPg)$KE_EID,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
## Add key event designation data
V(AOPg)$KE_KED<-KEKdata[match(V(AOPg)$KE_EID,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPg)$KE_KED[which(is.na(V(AOPg)$KE_KED))]) #The number of KEs without KEDs
allKEs
#fullKEs<-c(KERdata[,2],KERdata[,4],KERdata[,1])
#length(allKEs)
uniqueKEs<-unique(allKEs)
uniqueKEs
