library(manipulate)
U=10.1 #max length of 10.1 cm (fishbase_pimephales_promulas)
L=0.01 #min set to be 0.01cm (some small value above 0)
logistic <- function(x,k,x0) 1/(1+exp(-k*(x-x0)))
vonbert <- function(t,linf,k,t0) linf*(1-exp(-k*(t-t0)))
exp(vonbert(7/12,5.9,.460,-.86))
manipulate(curve(logistic(x,k,x0), L, U, n=1000,ylab="Survival Prob"), k=slider(0.1,1,.5), x0=slider(0,10,5))
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
34270*30.6
34270*.306
14224*.306
14224*.306*.21
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vonbert(65/365,6.1,.460,-.86)
vonbert(41/365,6.1,.460,-.86)
vb1=c(5.9,.82,-0.10)
vb2=c(6.1,.460,-.86)
vb3=c(6.4,.930,-.05)
vonbert(65/365,vb2)
vonbert(41/365,vb2)
vonbert(65/365,unlist(vb2)
vonbert(41/365,vb2)
# Simulate a population from an initial distribution of sizes
nt0<-723; # set initial number of fish in population
zt0<-rep(1,nt0)# all fish intiially 1mm
zt1<-rep(NA,nt0)# create vector to add new sizes to
vb=list(c(.82,5.9,-.10),c(.46,6.1,-.86),c(.93,6.4,-0.5))
initdist=
for(i in 1:nt0){}
vonbert(65/365,unlist(vb2))
manipulate(vonbert(x,linf,k,t0)x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(x,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365+t0,41/365+t0), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vb1=c(linf=5.9,k=.82,t0=-0.10)
vonbert(41/365,vb1)
vonbert(41/365,flatten(vb1))
vonbert(41/365,unlist(vb1))
unlist(vb1)
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
curve(dnorm(x,mean=15,sd=3),5,35,xlab="Size (mm)",ylab="prob",col="blue")
dist0=rlnorm(1000,0,1)
dist0
plot(dist0)
hist(dist0)
dist0=rlnorm(1000,0,.5)
hist(dist0)
dist0=rlnorm(1000,0,2)
hist(dist0)
dist0=rlnorm(1000,0,.025)
hist(dist0)
exp(1)
no0=1000
dist0=rep(0,no0)
227.47+227.47
library(igraph, lib.loc = localLibDir)
library(igraph)
workingDir<-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" ## Nate's EPA working directory
#workingDir<-"C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" ## Nate's personal comp working directory
# workingDir<-"C:\\Users\\obrienja\\Documents\\GitHub\\AOPWiki\\"
setwd(workingDir)
## Identifies location of data files
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all_KEs_plus.txt" # Additional ontology information file
KEked <- "data/all_KEs-ked.txt" # Additional ontology information file
## source() imports custom functions from associated file
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
t
as.numeric(substring(KEKdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KEKdata<-read.table(paste(workingDir, KEked, sep=""), sep="\t", stringsAsFactors=FALSE, header=F)
KEked <- "data/all_KEs-ked.txt" # Additional ontology information file
KEKdata<-read.table(paste(workingDir, KEked, sep=""), sep="\t", stringsAsFactors=FALSE, header=F)
KEked <- "data/all_KEs-KED.txt" # Additional ontology information file
KEKdata<-read.table(paste(workingDir, KEked, sep=""), sep="\t", stringsAsFactors=FALSE, header=F)
KEked <- "data/all-KEs-KED.txt" # Additional ontology information file
KEKdata<-read.table(paste(workingDir, KEked, sep=""), sep="\t", stringsAsFactors=FALSE, header=F)
as.numeric(substring(KEKdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
View(KEKdata)
as.numeric(substring(KEKdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KEKdata[,2]<-as.numeric(substring(KEKdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
View(KEKdata)
allKEs<-c(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T)
V(AOPg)$KE_name<-as.character(keID$KE)
V(AOPg)$name<-keID$KE
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,2]),1] # adds event ID number
V(AOPg)$AOP_ID<-KEPdata[match(V(AOPg)$KE_EID,KEPdata[,3]),1] # finds AOPID to add to V(AOPg) data
V(AOPg)$KE_EID
V(AOPg)$KE_KED<-KEKdata[match(V(AOPg)$KE_EID,KEKdata[,2]),3]
V(AOPg)$KE_KED
KEked <- "data/all-KEs-KED.txt" # Additional ontology information file
KEKdata<-read.table(paste(workingDir, KEked, sep=""), sep="\t", stringsAsFactors=FALSE, header=F)
KEKdata[,2]<-as.numeric(substring(KEKdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
V(AOPg)$KE_KED<-KEKdata[match(V(AOPg)$KE_EID,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
V(AOPg)$KE_KED
V(AOPg)$KE_KED[is.na()]
V(AOPg)$KE_KED[which(is.na(V(AOPg)$KE_KED))]<-"KE"
V(AOPg)$KE_KED
View(aop.edge.connectivity)
ecl<-aop.edge.connectivity(AOPg,names=F)
ecl<-aop.edge.connectivity(AOPg,names=F,kelist=V(AOPg)$KE_KED)
View(ecl)
ecl[order(ecl[,3],decreasing=T),]
E(AOPg)$asp_clr<-"gray"
ecl_sort<-ecl[order(ecl[,3],decreasing=T),]
View(ecl_sort)
E(AOPg)$asp_clr<-"gray"
E(AOPg)$asp_clr[simple.path.coloring(AOP,57,677)]<-"purple"
E(AOPg)$asp_clr[simple.path.coloring(AOPg,57,677)]<-"purple"
plot(AOPg ,vertex.size=2, edge.color=E(AOPg)$asp_clr, edge.arrow.size=.1, vertex.label=NA)
V(AOPg)$ked_color<-"Yellow"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="MIE")]<-"Green"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="AO")]<-"Red"
plot(AOPg ,vertex.size=2, edge.color=E(AOPg)$asp_clr, edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)ked_color)
plot(AOPg ,vertex.size=2, edge.color=E(AOPg)$asp_clr, edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$ked_color)
ecl_sort<-ecl[order(ecl[,3],decreasing=T),]
mosteccoutval<-rev(as.integer(tail(ecl_sort,10)))
ecln<-aop.edge.connectivity(AOPg,names=T,kelist=V(AOPg)$KE_KED)
ecln_sort<-ecln[order(ecl[,3],decreasing=T),]
mosteccoutval<-rev(as.integer(tail(ecln_sort,10)))
mosteccoutval<-as.integer(tail(ecln_sort,10)))
mosteccoutval<-as.integer(tail(ecln_sort,10))
ecln_sort<-ecln[order(ecl[,3],decreasing=T),]
View(ecln_sort)
aop.edge.connectivity= function(gr,kelist = V(gr)$ked,names=F,namelist=name){ #kelist is a list of key event designation characters (MIE,KE, or AO) corresponding to nodes in the graph gr
if(is.null(kelist)){print("Error: No key event designation list supplied")}
#is.character(V(sg.cond)$ked)
else{
mie.list<-which(kelist=="MIE")
ao.list<-which(kelist=="AO")
ec.list<-list()
ec.listn<-list()
i=0;
for(fromnode in mie.list){
for(tonode in ao.list){
i=i+1
x<- edge.connectivity(gr,source=fromnode,target=tonode)
ec.list[[i]]<-c(fromnode,tonode,x)
ec.listn[[i]]<-c(V(gr)$namelist[fromnode],V(gr)$namelist[tonode],x)
}
if(names==F){return(matrix(unlist(ec.list),ncol=3,byrow=T))}
else{return(matrix(unlist(ec.listn),ncol=3,byrow=T))
}
V(AOPg)$KE_name
ecln<-aop.edge.connectivity(AOPg,names=T,kelist=V(AOPg)$KE_KED,namelist=KE_name)
ecln_sort<-ecln[order(ecl[,3],decreasing=T),]
View(ecln)
ecln<-aop.edge.connectivity(AOPg,names=F,kelist=V(AOPg)$KE_KED)
ecl<-aop.edge.connectivity(AOPg,names=F,kelist=V(AOPg)$KE_KED)
V(AOPg)$name
aop.edge.connectivity= function(gr,kelist = V(gr)$ked,names=F,nameslist=name){ #kelist is a list of key event designation characters (MIE,KE, or AO) corresponding to nodes in the graph gr
if(is.null(kelist)){print("Error: No key event designation list supplied")}
#is.character(V(sg.cond)$ked)
else{
mie.list<-which(kelist=="MIE")
ao.list<-which(kelist=="AO")
ec.list<-list()
ec.listn<-list()
i=0;
for(fromnode in mie.list){
for(tonode in ao.list){
i=i+1
x<- edge.connectivity(gr,source=fromnode,target=tonode)
ec.list[[i]]<-c(fromnode,tonode,x)
ec.listn[[i]]<-c(V(gr)$nameslist[fromnode],V(gr)$namelist[tonode],x)
}
if(names==F){return(matrix(unlist(ec.list),ncol=3,byrow=T))}
else{return(matrix(unlist(ec.listn),ncol=3,byrow=T))
}
ecln<-aop.edge.connectivity(AOPg,names=T,kelist=V(AOPg)$KE_KED,nameslist=KE_name)
ecln_sort<-ecln[order(ecln[,3],decreasing=T),]
View(ecln_sort)
ecl<-aop.edge.connectivity(AOPg,names=F,kelist=V(AOPg)$KE_KED)
ecl_sort<-ecl[order(ecl[,3],decreasing=T),]
ecl_sort
ecl_sort[[1]]
ecl_sort[[1,1]]
ecl_sort[[1,2]]
match(V(AOPg)$name,V(AOPg)$KE_name)
V(AOPg)$KE_name[V(AOPg)$name==57]
for(i in 1:10){
ecl_sort[[i,1]]<-V(AOPg)$KE_name[V(AOPg)$name==ecl_sort[[i,1]]]
ecl_sort[[i,2]]<-V(AOPg)$KE_name[V(AOPg)$name==ecl_sort[[i,2]]]
}
View(ecln_sort)
View(ecl_sort)
ecl_sort_names<-ecl_sort
ecl_sort<-ecl[order(ecl[,3],decreasing=T),]
ecl_sort_names<-ecl_sort
for(i in 1:10){
ecl_sort_names[[i,1]]<-V(AOPg)$KE_name[V(AOPg)$name==ecl_sort[[i,1]]]
ecl_sort_names[[i,2]]<-V(AOPg)$KE_name[V(AOPg)$name==ecl_sort[[i,2]]]
}
View(ecl_sort)
View(ecl_sort_names)
print(head(ecl_sort_names,10))
ecl_ten<-head(ecl_sort_names,10)
print(ecl_ten)
#name file to output to and create R variable for it
output<-file("results/ecl_results.txt")
#tell what to write into R variable
writeLines(ecl_ten, output)
#Stop close file being edited
close(output)
ecl_ten[,1]
ecl_ten<-head(ecl_sort_names,10)
eclout<-paste(ecl_ten[,1]," to ",ecl_ten[,2],": ECL: ",ecl_ten[,3],sep="")
print(eclout)
output<-file("results/ecl_results.txt")
writeLines(eclout, output)
close(output)
ecl_ten<-head(ecl_sort_names,10)
eclout<-paste(ecl_ten[,1]," -> to -> ",ecl_ten[,2],", ECL: ",ecl_ten[,3],sep="")
print(eclout)
#name file to output to and create R variable for it
output<-file("results/ecl_results.txt")
#tell what to write into R variable
writeLines(eclout, output)
#Stop close file being edited
close(output)
