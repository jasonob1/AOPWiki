library(manipulate)
U=10.1 #max length of 10.1 cm (fishbase_pimephales_promulas)
L=0.01 #min set to be 0.01cm (some small value above 0)
logistic <- function(x,k,x0) 1/(1+exp(-k*(x-x0)))
vonbert <- function(t,linf,k,t0) linf*(1-exp(-k*(t-t0)))
exp(vonbert(7/12,5.9,.460,-.86))
manipulate(curve(logistic(x,k,x0), L, U, n=1000,ylab="Survival Prob"), k=slider(0.1,1,.5), x0=slider(0,10,5))
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
34270*30.6
34270*.306
14224*.306
14224*.306*.21
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vonbert(65/365,6.1,.460,-.86)
vonbert(41/365,6.1,.460,-.86)
vb1=c(5.9,.82,-0.10)
vb2=c(6.1,.460,-.86)
vb3=c(6.4,.930,-.05)
vonbert(65/365,vb2)
vonbert(41/365,vb2)
vonbert(65/365,unlist(vb2)
vonbert(41/365,vb2)
# Simulate a population from an initial distribution of sizes
nt0<-723; # set initial number of fish in population
zt0<-rep(1,nt0)# all fish intiially 1mm
zt1<-rep(NA,nt0)# create vector to add new sizes to
vb=list(c(.82,5.9,-.10),c(.46,6.1,-.86),c(.93,6.4,-0.5))
initdist=
for(i in 1:nt0){}
vonbert(65/365,unlist(vb2))
manipulate(vonbert(x,linf,k,t0)x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(x,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365+t0,41/365+t0), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vb1=c(linf=5.9,k=.82,t0=-0.10)
vonbert(41/365,vb1)
vonbert(41/365,flatten(vb1))
vonbert(41/365,unlist(vb1))
unlist(vb1)
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
curve(dnorm(x,mean=15,sd=3),5,35,xlab="Size (mm)",ylab="prob",col="blue")
dist0=rlnorm(1000,0,1)
dist0
plot(dist0)
hist(dist0)
dist0=rlnorm(1000,0,.5)
hist(dist0)
dist0=rlnorm(1000,0,2)
hist(dist0)
dist0=rlnorm(1000,0,.025)
hist(dist0)
exp(1)
no0=1000
dist0=rep(0,no0)
####~ LOAD PACKAGES AND IMPORT AOPWIKI DATA ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
## Needs igraph package
library(igraph)
##  Set working directory
workingDir <-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" ## Nate's EPA working directory
# workingDir<- "C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" ## Nate's personal comp working directory
setwd(workingDir)
## Identifies location of data files
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all_KEs_plus.txt" # Additional ontology information file
## source() imports custom functions from associated file
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
## Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
## Identify all unique KEs
allKEs<-c(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T)
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
V(AOPg)$name<-keID$KE
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,2]),1] # adds event ID number
V(AOPg)$AOP_ID<-KEPdata[match(V(AOPg)$KE_EID,KEPdata[,3]),1] # finds AOPID to add to V(AOPg) data
## Set default plotting background color to black
##!! Evaluate as either T or F or plots will not display properly
set.bg.black(F)
## Identifies which KEs are included in KERs, but are not themselves included in the KE event listings.
# V(AOPg)$KE_name[which(is.na(V(AOPg)$KE_EID))]
acols=colorRampPalette(c("green","red","cyan","orange","magenta","yellow","blue"))
##  Assign colors
for(i in 1:length(unique(V(AOPg)$AOP_ID))){
V(AOPg)[which(V(AOPg)$AOP_ID==unique(V(AOPg)$AOP_ID)[i])]$acol<-acols(length(unique(V(AOPg)$AOP_ID)))[i]
}
sort(table(V(AOPg)$AOP_ID))
## Highlight a given AOP for identification by using size on the network plot
V(AOPg)$exsize<-2
V(AOPg)[which(V(AOPg)$AOP_ID==130)]$exsize<-5 #Note: must specify V(AOPg)$exsize as vertex.size in plot for this to work
## Plot
set.seed(1)
plot(AOPg,layout=layout.fruchterman.reingold(AOPg),  vertex.color=V(AOPg)$acol,vertex.label=NA, vertex.size=2, edge.arrow.size=.08)
hist(AOP_freqs,xlab="# Key Events",ylab="Frequency",col.axis=plotlabcol,col.lab=plotlabcol,col=plotlabcol)
AOP_freqs<-table(V(AOPg)$AOP_ID)
sort(AOP_freqs)
## Histogram of number of KE per unique AOP ID
hist(AOP_freqs,xlab="# Key Events",ylab="Frequency",col.axis=plotlabcol,col.lab=plotlabcol,col=plotlabcol)
hist(AOP_freqs,xlab="# Key Events",ylab="Frequency",col.axis=plotlabcol,col.lab=plotlabcol)
set.bg.black(T)
hist(AOP_freqs,xlab="# Key Events",ylab="Frequency",col.axis=plotlabcol,col.lab=plotlabcol)
hist(AOP_freqs,xlab="# Key Events",ylab="Frequency",col.axis=plotlabcol,col.lab=plotlabcol,col="gray")
set.bg.black(T)
hist(AOP_freqs,xlab="# Key Events",ylab="Frequency",col.axis=plotlabcol,col.lab=plotlabcol,col="gray")
set.bg.black(F)
hist(AOP_freqs,xlab="# Key Events",ylab="Frequency",col.axis=plotlabcol,col.lab=plotlabcol,col="gray")
bp_wcc<-barplot(table(V(AOPg)$AOP_ID),xaxt='n',xlab="AOP",ylab="# Key Events",col.axis=plotlablcol,col.lab=plotlabcal)
abline(h=mean(AOP_freqs),col="red")
bp_wcc<-barplot(table(V(AOPg)$AOP_ID),xaxt='n',xlab="AOP",ylab="# Key Events",col.axis=plotlabcol,col.lab=plotlabcal)
abline(h=mean(AOP_freqs),col="red")
bp_wcc<-barplot(table(V(AOPg)$AOP_ID),xaxt='n',xlab="AOP",ylab="# Key Events",col.axis=plotlabcol,col.lab=plotlabcol)
abline(h=mean(AOP_freqs),col="red")
set.bg.black(T)
bp_wcc<-barplot(table(V(AOPg)$AOP_ID),xaxt='n',xlab="AOP",ylab="# Key Events",col.axis=plotlabcol,col.lab=plotlabcol)
abline(h=mean(AOP_freqs),col="red")
clsmode="in"
## Prints the top-ten key event names by closeness value
sort(closeness(AOPg,mode=clsmode))
rev(as.integer(tail(sort(closeness(AOPg,mode=clsmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(closeness(AOPg,mode=clsmode)),10))),V(AOPg)$name)])
## Colors nodes based on cloesness values
b2mpal=colorRampPalette(clscol)
V(AOPg)$close_col<-b2mpal(1000)[as.numeric(cut(closeness(AOPg,mode=clsmode,norm=TRUE),breaks = 1000))]
## Plots color and nodes sized by closeness
set.seed(1)
plot(AOPg, vertex.size=1000*closeness(AOPg,normalized=TRUE,mode=clsmode), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
## Histogram of closeness (including a change of units)
hist(closeness(AOPg,mode=clsmode)*10^6,breaks=20,col=b2mpal(20))
## Scatterplot of closeness values
plot(closeness(AOPg,mode=clsmode), xlab="Key Event", col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="Closeness Value",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
hist(closeness(AOPg,mode=clsmode)*10^6,breaks=20,col=b2mpal(20),col.axis=plotlabcol, col.lab=plotlabcol,)
plot(closeness(AOPg,mode=clsmode), xlab="Key Event", col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="Closeness Value",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
clsmode="out"
## Prints the top-ten key event names by closeness value
sort(closeness(AOPg,mode=clsmode))
rev(as.integer(tail(sort(closeness(AOPg,mode=clsmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(closeness(AOPg,mode=clsmode)),10))),V(AOPg)$name)])
## Colors nodes based on cloesness values
b2mpal=colorRampPalette(clscol)
V(AOPg)$close_col<-b2mpal(1000)[as.numeric(cut(closeness(AOPg,mode=clsmode,norm=TRUE),breaks = 1000))]
## Plots color and nodes sized by closeness
set.seed(1)
plot(AOPg, vertex.size=1000*closeness(AOPg,normalized=TRUE,mode=clsmode), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
## Histogram of closeness (including a change of units)
hist(closeness(AOPg,mode=clsmode)*10^6,breaks=20,col=b2mpal(20),col.axis=plotlabcol, col.lab=plotlabcol,)
## Scatterplot of closeness values
plot(closeness(AOPg,mode=clsmode), xlab="Key Event", col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="Closeness Value",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
plot(closeness(AOPg,mode="all"), xlab="Key Event", col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="Closeness Value",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
b2mpal=colorRampPalette(clscol)
V(AOPg)$close_col<-b2mpal(1000)[as.numeric(cut(closeness(AOPg,mode="all",norm=TRUE),breaks = 1000))]
plot(closeness(AOPg,mode="all"), xlab="Key Event", col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="Closeness Value",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
clsmode="in"
## Prints the top-ten key event names by closeness value
sort(closeness(AOPg,mode=clsmode))
rev(as.integer(tail(sort(closeness(AOPg,mode=clsmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(closeness(AOPg,mode=clsmode)),10))),V(AOPg)$name)])
sort(closeness(AOPg,mode="all"))
rev(as.integer(tail(sort(closeness(AOPg,mode="all")),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(closeness(AOPg,mode="all")),10))),V(AOPg)$name)])
eccmode="all"
V(AOPg)$ecc<-eccentricity(AOPg,mode =eccmode)
sort(eccentricity(AOPg,mode =eccmode))
####~~~ Total Eccentricity ####
eccmode="all"
## Assigns eccentricity values as a node attribute
V(AOPg)$ecc<-eccentricity(AOPg,mode =eccmode)
## Prints the top-ten key event names by eccentricity value
sort(eccentricity(AOPg,mode =eccmode))
rev(as.integer(tail(sort(eccentricity(AOPg,mode=eccmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(eccentricity(AOPg,mode=eccmode)),10))),V(AOPg)$name)])
## Assigns color based on eccentricity value
b2cpal=colorRampPalette(ecccol)
V(AOPg)$ecc_col<-b2cpal(max(V(AOPg)$ecc)+1)[V(AOPg)$ecc+1]
## Plot colors and node sizes based on eccentricity value
set.seed(1)
plot(AOPg, vertex.size=4*(V(AOPg)$ecc/max(V(AOPg)$ecc)), vertex.color=V(AOPg)$ecc_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
## Histogram of eccentricity values
barplot(table(eccentricity(AOPg,mode=eccmode)), xlab="Eccentricity", ylab="Frequency",col.axis=plotlabcol, col.lab=plotlabcol,col=b2cpal(max(eccentricity(AOPg,mode =eccmode))))
legend('topright',legend=rev(seq(min(eccentricity(AOPg,mode =eccmode)),max(eccentricity(AOPg,mode =eccmode)),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2cpal(length(rev(seq(min(eccentricity(AOPg,mode =eccmode)),max(eccentricity(AOPg,mode =eccmode)),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
eccmode="all"
## Assigns eccentricity values as a node attribute
V(AOPg)$ecc<-eccentricity(AOPg,mode =eccmode)
## Prints the top-ten key event names by eccentricity value
sort(eccentricity(AOPg,mode =eccmode))
rev(as.integer(tail(sort(eccentricity(AOPg,mode=eccmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(eccentricity(AOPg,mode=eccmode)),10))),V(AOPg)$name)])
eccmode="in"
## Assigns eccentricity values as a node attribute
V(AOPg)$ecc<-eccentricity(AOPg,mode =eccmode)
## Prints the top-ten key event names by eccentricity value
sort(eccentricity(AOPg,mode =eccmode))
rev(as.integer(tail(sort(eccentricity(AOPg,mode=eccmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(eccentricity(AOPg,mode=eccmode)),10))),V(AOPg)$name)])
eccmode="out"
## Assigns eccentricity values as a node attribute
V(AOPg)$ecc<-eccentricity(AOPg,mode =eccmode)
## Prints the top-ten key event names by eccentricity value
sort(eccentricity(AOPg,mode =eccmode))
rev(as.integer(tail(sort(eccentricity(AOPg,mode=eccmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(eccentricity(AOPg,mode=eccmode)),10))),V(AOPg)$name)])
b2cpal=colorRampPalette(ecccol)
V(AOPg)$ecc_col<-b2cpal(max(V(AOPg)$ecc)+1)[V(AOPg)$ecc+1]
barplot(table(eccentricity(AOPg,mode=eccmode)), xlab="Eccentricity", ylab="Frequency",col.axis=plotlabcol, col.lab=plotlabcol,col=b2cpal(max(eccentricity(AOPg,mode =eccmode))))
legend('topright',legend=rev(seq(min(eccentricity(AOPg,mode =eccmode)),max(eccentricity(AOPg,mode =eccmode)),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2cpal(length(rev(seq(min(eccentricity(AOPg,mode =eccmode)),max(eccentricity(AOPg,mode =eccmode)),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
b2cpal=colorRampPalette(ecccol)
V(AOPg)$ecc_col<-b2cpal(max(V(AOPg)$ecc))[V(AOPg)$ecc]
barplot(table(eccentricity(AOPg,mode=eccmode)), xlab="Eccentricity", ylab="Frequency",col.axis=plotlabcol, col.lab=plotlabcol,col=b2cpal(max(eccentricity(AOPg,mode =eccmode))+1))
legend('topright',legend=rev(seq(min(eccentricity(AOPg,mode =eccmode)),max(eccentricity(AOPg,mode =eccmode)),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2cpal(length(rev(seq(min(eccentricity(AOPg,mode =eccmode)),max(eccentricity(AOPg,mode =eccmode)),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
barplot(table(eccentricity(AOPg,mode=eccmode)), xlab="Eccentricity", ylab="Frequency",col.axis=plotlabcol, col.lab=plotlabcol,col=b2cpal(max(eccentricity(AOPg,mode =eccmode))+1))
set.seed(1)
plot(AOPg, vertex.size=4*(V(AOPg)$ecc/max(V(AOPg)$ecc)), vertex.color=V(AOPg)$ecc_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
eccmode="in"
## Assigns eccentricity values as a node attribute
V(AOPg)$ecc<-eccentricity(AOPg,mode =eccmode)
b2cpal=colorRampPalette(ecccol)
V(AOPg)$ecc_col<-b2cpal(max(V(AOPg)$ecc)+1)[V(AOPg)$ecc+1]
set.seed(1)
plot(AOPg, vertex.size=4*(V(AOPg)$ecc/max(V(AOPg)$ecc)), vertex.color=V(AOPg)$ecc_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
eccmode="all"
## Assigns eccentricity values as a node attribute
V(AOPg)$ecc<-eccentricity(AOPg,mode =eccmode)
## Prints the top-ten key event names by eccentricity value
sort(eccentricity(AOPg,mode =eccmode))
rev(as.integer(tail(sort(eccentricity(AOPg,mode=eccmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(eccentricity(AOPg,mode=eccmode)),10))),V(AOPg)$name)])
## Assigns color based on eccentricity value
b2cpal=colorRampPalette(ecccol)
V(AOPg)$ecc_col<-b2cpal(max(V(AOPg)$ecc)+1)[V(AOPg)$ecc+1]
## Plot colors and node sizes based on eccentricity value
set.seed(1)
plot(AOPg, vertex.size=4*(V(AOPg)$ecc/max(V(AOPg)$ecc)), vertex.color=V(AOPg)$ecc_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
b2upal=colorRampPalette(betcol)
V(AOPg)$bet_col<-b2upal(20)[as.numeric(cut(betweenness(AOPg,directed=F),breaks = 20))]
set.seed(1)
plot(AOPg, vertex.size=3000*betweenness(AOPg,normalized=TRUE,directed=F), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
hist(log10(betweenness(AOPg, directed=F)),breaks=20,col=b2upal(20), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
barplot(table(as.numeric(cut(betweenness(AOPg,directed=F),breaks = 20))),col=b2upal(20),col.axis=plotlabcol, col.lab=plotlabcol)
set.seed(1)
plot(AOPg, vertex.size=300*betweenness(AOPg,normalized=TRUE,directed=F), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
set.seed(1)
plot(AOPg, vertex.size=30*betweenness(AOPg,normalized=TRUE,directed=F), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
set.seed(1)
plot(AOPg, vertex.size=100*betweenness(AOPg,normalized=TRUE,directed=F), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
hist(log10(betweenness(AOPg, directed=F)),breaks=20,col=b2upal(20), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
hist(log10(betweenness(AOPg, directed=F)),breaks=20,col=b2upal(30), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
hist(betweenness(AOPg, directed=F),breaks=20,col=b2upal(20), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
hist(log10(betweenness(AOPg, directed=F)),breaks=30,col=b2upal(30), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
barplot(table(as.numeric(cut(betweenness(AOPg,directed=F),breaks = 30))),col=b2upal(30),col.axis=plotlabcol, col.lab=plotlabcol)
sort(betweenness(AOPg,directed=F))
rev(as.integer(tail(sort(betweenness(AOPg,directed=F)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(betweenness(AOPg,directed=F)),10))),V(AOPg)$name)])
b2upal=colorRampPalette(betcol)
V(AOPg)$bet_col<-b2upal(30)[as.numeric(cut(betweenness(AOPg,directed=F),breaks = 30))]
set.seed(1)
plot(AOPg, vertex.size=100*betweenness(AOPg,normalized=TRUE,directed=F), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
set.seed(1)
plot(AOPg, vertex.size=50*betweenness(AOPg,normalized=TRUE,directed=F), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
hist(log10(betweenness(AOPg, directed=F)),breaks=30,col=b2upal(30), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
hist(log10(betweenness(AOPg, directed=F)),breaks=30,col=b2upal(30), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness"["undir"],")","")), main="")
b2upal=colorRampPalette(betcol)
V(AOPg)$bet_col<-b2upal(20)[as.numeric(cut(betweenness(AOPg,directed=TRUE),breaks = 20))]
hist(log10(betweenness(AOPg)),breaks=20,col=b2upal(20), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
set.seed(1)
plot(AOPg, vertex.size=3000*betweenness(AOPg,normalized=TRUE,directed=T), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
sort(betweenness(AOPg,directed=TRUE))
rev(as.integer(tail(sort(betweenness(AOPg,directed=TRUE)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(betweenness(AOPg,directed=TRUE)),10))),V(AOPg)$name)])
clsmode="total"
sort(closeness(AOPg,mode=clsmode))
rev(as.integer(tail(sort(closeness(AOPg,mode=clsmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(closeness(AOPg,mode=clsmode)),10))),V(AOPg)$name)])
b2mpal=colorRampPalette(clscol)
V(AOPg)$close_col<-b2mpal(1000)[as.numeric(cut(closeness(AOPg,mode=clsmode,norm=TRUE),breaks = 1000))]
set.seed(1)
plot(AOPg, vertex.size=1000*closeness(AOPg,normalized=TRUE,mode=clsmode), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
sort(closeness(AOPg,mode="all"))
sort(closeness(AOPg,mode="total"))
dif(sort(closeness(AOPg,mode="all")),sort(closeness(AOPg,mode="total")))
sort(closeness(AOPg,mode="all"))-sort(closeness(AOPg,mode="total"))
clsmode="in"
## Prints the top-ten key event names by closeness value
sort(closeness(AOPg,mode=clsmode))
rev(as.integer(tail(sort(closeness(AOPg,mode=clsmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(closeness(AOPg,mode=clsmode)),10))),V(AOPg)$name)])
## Colors nodes based on cloesness values
b2mpal=colorRampPalette(clscol)
V(AOPg)$close_col<-b2mpal(1000)[as.numeric(cut(closeness(AOPg,mode=clsmode,norm=TRUE),breaks = 1000))]
## Plots color and nodes sized by closeness
set.seed(1)
plot(AOPg, vertex.size=1000*closeness(AOPg,normalized=TRUE,mode=clsmode), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
set.seed(1)
plot(AOPg, vertex.size=3000*closeness(AOPg,normalized=TRUE,mode=clsmode), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
sort(closeness(AOPg,mode=clsmode))
b2mpal=colorRampPalette(clscol)
V(AOPg)$close_col<-b2mpal(3000)[as.numeric(cut(closeness(AOPg,mode=clsmode,norm=TRUE),breaks = 1000))]
## Plots color and nodes sized by closeness
set.seed(1)
plot(AOPg, vertex.size=3000*closeness(AOPg,normalized=TRUE,mode=clsmode), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
b2mpal=colorRampPalette(clscol)
V(AOPg)$close_col<-b2mpal(1000)[as.numeric(cut(closeness(AOPg,mode=clsmode,norm=TRUE),breaks = 1000))]
## Plots color and nodes sized by closeness
set.seed(1)
plot(AOPg, vertex.size=1500*closeness(AOPg,normalized=TRUE,mode=clsmode), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
set.seed(1)
plot(AOPg, vertex.size=2000*closeness(AOPg,normalized=TRUE,mode=clsmode), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
clsmode="out"
## Prints the top-ten key event names by closeness value
sort(closeness(AOPg,mode=clsmode))
rev(as.integer(tail(sort(closeness(AOPg,mode=clsmode)),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(closeness(AOPg,mode=clsmode)),10))),V(AOPg)$name)])
## Colors nodes based on cloesness values
b2mpal=colorRampPalette(clscol)
V(AOPg)$close_col<-b2mpal(1000)[as.numeric(cut(closeness(AOPg,mode=clsmode,norm=TRUE),breaks = 1000))]
## Plots color and nodes sized by closeness
set.seed(1)
plot(AOPg, vertex.size=2000*closeness(AOPg,normalized=TRUE,mode=clsmode), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
