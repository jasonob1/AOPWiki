library(manipulate)
U=10.1 #max length of 10.1 cm (fishbase_pimephales_promulas)
L=0.01 #min set to be 0.01cm (some small value above 0)
logistic <- function(x,k,x0) 1/(1+exp(-k*(x-x0)))
vonbert <- function(t,linf,k,t0) linf*(1-exp(-k*(t-t0)))
exp(vonbert(7/12,5.9,.460,-.86))
manipulate(curve(logistic(x,k,x0), L, U, n=1000,ylab="Survival Prob"), k=slider(0.1,1,.5), x0=slider(0,10,5))
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
34270*30.6
34270*.306
14224*.306
14224*.306*.21
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vonbert(65/365,6.1,.460,-.86)
vonbert(41/365,6.1,.460,-.86)
vb1=c(5.9,.82,-0.10)
vb2=c(6.1,.460,-.86)
vb3=c(6.4,.930,-.05)
vonbert(65/365,vb2)
vonbert(41/365,vb2)
vonbert(65/365,unlist(vb2)
vonbert(41/365,vb2)
# Simulate a population from an initial distribution of sizes
nt0<-723; # set initial number of fish in population
zt0<-rep(1,nt0)# all fish intiially 1mm
zt1<-rep(NA,nt0)# create vector to add new sizes to
vb=list(c(.82,5.9,-.10),c(.46,6.1,-.86),c(.93,6.4,-0.5))
initdist=
for(i in 1:nt0){}
vonbert(65/365,unlist(vb2))
manipulate(vonbert(x,linf,k,t0)x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(x,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365+t0,41/365+t0), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vb1=c(linf=5.9,k=.82,t0=-0.10)
vonbert(41/365,vb1)
vonbert(41/365,flatten(vb1))
vonbert(41/365,unlist(vb1))
unlist(vb1)
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
curve(dnorm(x,mean=15,sd=3),5,35,xlab="Size (mm)",ylab="prob",col="blue")
dist0=rlnorm(1000,0,1)
dist0
plot(dist0)
hist(dist0)
dist0=rlnorm(1000,0,.5)
hist(dist0)
dist0=rlnorm(1000,0,2)
hist(dist0)
dist0=rlnorm(1000,0,.025)
hist(dist0)
exp(1)
no0=1000
dist0=rep(0,no0)
library(igraph)
par(bg="white")
workingDir <-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" #EPA Dir
# workingDir<- "C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" #Personal Dir
setwd(workingDir)
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all_KEs_plus.txt"
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
##  Identify all unique KEs
allKEs<-c(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T)
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
V(AOPg)$name<-keID$KE
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,2]),1] # adds event ID number
V(AOPg)$AOP_ID<-KEPdata[match(V(AOPg)$KE_EID,KEPdata[,3]),1] # finds AOPID to add to V(AOPg) data
V(AOPg)$cc_color<-unlist(color.comps(AOPg,"weak")$vcol)  #color.comps is a custom function stored in the AOP_net_functions.R file
E(AOPg)$cc_color<-unlist(color.comps(AOPg,"weak")$ecol)  #color.comps is a custom function stored in the AOP_net_functions.R file
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=V(AOPg)$cc_size,vertex.color=V(AOPg)$cc_color, edge.color=E(AOPg)$cc_color,  vertex.size=2, edge.arrow.size=.1, vertex.label=NA)
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=2, edge.arrow.size=.1,vertex.color=V(AOPg)$cc_color, edge.color=E(AOPg)$cc_color,  vertex.size=2,vertex.label=NA)
bp_wcc<-barplot(table(V(AOPg)$AOP_ID),col.axis="white", xlab="AOP ID",ylab="# Key Events",col.lab="white")
abline(h=mean(AOP_freqs),col="red")
AOP_freqs<-table(V(AOPg)$AOP_ID)
bp_wcc<-barplot(table(V(AOPg)$AOP_ID),col.axis="white", xlab="AOP ID",ylab="# Key Events",col.lab="white")
abline(h=mean(AOP_freqs),col="red")
wcomps<-components(AOPg,mode="weak")
wcc_freqs<-table(wcomps$csize)
bp_wcc<-barplot(table(wcomps$csize),col.axis="black", xlab="Component size",ylab="Frequency",col.lab="black")
plot(wcomps$csize,col=V(AOPg)$cc_color)
View(color.comps)
plot(wcomps$csize,cols=rainbow(length(which(wcomps$csize>1))))
wcomps$csize
plot(wcomps$csize, cols=rainbow(length(wcomps$csize>1)))
wcc_col<-rainbom(length(wcomps$csize>1))
wcc_col<-rainbow(length(wcomps$csize>1))
plot(wcomps$csize, cols=wcc_col)
plot(wcomps$csize, col=wcc_col)
plot(log10(wcomps$csize), col=wcc_col)
barplot(log10(wcomps$csize), col=wcc_col)
barplot(wcomps$csize, col=wcc_col)
View(color.comps)
grad.comps<-function(gr){
comps<-components(gr, mode=ccmode)
ntcomps<-which(comps$csize>1) #non-trivial ccs (i.e. with more than 1 node)
cols=heat.colors(length(ntcomps))
V(gr)$cc<-comps$membership
for(i in 1:length(ntcomps)){
V(gr)[which(V(gr)$cc==ntcomps[i])]$color<-cols[i]
edgecombcc<-expand.grid(V(gr)[which(comps$membership==ntcomps[i])],V(gr)[which(comps$membership==ntcomps[i])]) #creates a pairwise list of all nodes in the cc
edgecombflat<-as.vector(rbind(edgecombcc[[1]],edgecombcc[[2]])) #flattens the pairwise list to a vector where entries are read pairwise
edges.in.cc<-get.edge.ids(gr,edgecombflat,directed=TRUE)
E(gr)$color[edges.in.cc]<-cols[[i]]}
return(list(vcol=V(gr)$color,ecol=E(gr)$color))
}
View(grad.comps)
grad.comps<-function(gr){
comps<-components(gr, mode="weak")
ntcomps<-which(comps$csize>1) #non-trivial ccs (i.e. with more than 1 node)
cols=heat.colors(length(ntcomps))
V(gr)$cc<-comps$membership
for(i in 1:length(ntcomps)){
V(gr)[which(V(gr)$cc==ntcomps[i])]$color<-cols[i]
edgecombcc<-expand.grid(V(gr)[which(comps$membership==ntcomps[i])],V(gr)[which(comps$membership==ntcomps[i])]) #creates a pairwise list of all nodes in the cc
edgecombflat<-as.vector(rbind(edgecombcc[[1]],edgecombcc[[2]])) #flattens the pairwise list to a vector where entries are read pairwise
edges.in.cc<-get.edge.ids(gr,edgecombflat,directed=TRUE)
E(gr)$color[edges.in.cc]<-cols[[i]]}
return(list(vcol=V(gr)$color,ecol=E(gr)$color))
}
V(AOPg)$cc_color<-unlist(grad.comps(AOPg)$vcol)  #color.comps is a custom function stored in the AOP_net_functions.R file
E(AOPg)$cc_color<-unlist(grad.comps(AOPg)$ecol)
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=2, edge.arrow.size=.1,vertex.color=V(AOPg)$cc_color, edge.color=E(AOPg)$cc_color,  vertex.size=2,vertex.label=NA)
V(AOPg)
attributes(V(AOPg))
V(AOPg)$cc_size
components(AOPg)
V(AOPg)$wcc_memb<-components(AOPg,mode="weak")$membership
for(i in 1:components(AOPg,mode="weak")$no){
V(AOPg)[which(V(AOPg)$wcc_memb)==i]$wcc_size<-components(AOPg,mode="weak")$csize[i]
}
V(AOPg)$wcc_memb<-components(AOPg,mode="weak")$membership
for(i in 1:components(AOPg,mode="weak")$no){
V(AOPg)[which(V(AOPg)$wcc_memb==i)]$wcc_size<-components(AOPg,mode="weak")$csize[i]
}
V(AOPg)$wcc_size
rev(sort(V(AOPg)$wcc_size))
hcpal<-heat.colors[components(AOPg,mode="weak")$no]
hcpal<-heat.colors(components(AOPg,mode="weak")$no)
hcpal<-heat.colors(max(components(AOPg,mode="weak")$csize))
V(AOPg)$wcc_col<-heat.colors[V(AOPg)$wcc_size]
V(AOPg)$wcc_col<-hcpal[V(AOPg)$wcc_size]
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=2, edge.arrow.size=.1,vertex.color=V(AOPg)$wcc_color, vertex.size=2,vertex.label=NA)
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=2, edge.arrow.size=.1,vertex.color=V(AOPg)$wcc_col, vertex.size=2,vertex.label=NA)
hcpal<-heat.colors(max(components(AOPg,mode="weak")$csize)+1)
V(AOPg)$wcc_col<-hcpal[V(AOPg)$wcc_size]
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=2, edge.arrow.size=.1,vertex.color=V(AOPg)$wcc_col, vertex.size=2,vertex.label=NA)
V(AOPg)$wcc_col<-hcpal[V(AOPg)$wcc_size+1]
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=2, edge.arrow.size=.1,vertex.color=V(AOPg)$wcc_col, vertex.size=2,vertex.label=NA)
hcpal<-rev(heat.colors(max(components(AOPg,mode="weak")$csize)))
V(AOPg)$wcc_col<-hcpal[V(AOPg)$wcc_size]
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=2, edge.arrow.size=.1,vertex.color=V(AOPg)$wcc_col, vertex.size=2,vertex.label=NA)
barplot(wcomps$csize, col=V(AOPg)$wcc_col)
wcomps<-components(AOPg,mode="weak")
wcc_freqs<-table(wcomps$csize)
bp_wcc<-barplot(table(wcomps$csize),col.axis="black", xlab="Component size",ylab="Frequency",col.lab="black")
bp_wcc<-barplot(table(wcomps$csize),col="black", col.axis="black", xlab="Component size",ylab="Frequency",col.lab="black")
V(AOPg)$cc_color<-unlist(color.comps(AOPg,"strong")$vcol)  #color.comps is a custom function stored in the AOP_net_functions.R file
E(AOPg)$cc_color<-unlist(color.comps(AOPg,"strong")$ecol)  #color.comps is a custom function stored in the AOP_net_functions.R file
V(AOPg)$cc_size<-unlist(color.comps(AOPg,"strong")$vsize)
E(AOPg)$cc_width<-unlist(color.comps(AOPg,"strong")$ewidth)
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=V(AOPg)$cc_size, edge.width=V(AOPg)$cc_width, vertex.color=V(AOPg)$cc_color, edge.color=E(AOPg)$cc_color,  vertex.size=2, edge.arrow.size=.1, vertex.label=NA)
par(bg="white")
set.seed(1)
plot(AOPg,vertex.size=V(AOPg)$cc_size, edge.width=E(AOPg)$cc_width, vertex.color=V(AOPg)$cc_color, edge.color=E(AOPg)$cc_color,  vertex.size=2, edge.arrow.size=.1, vertex.label=NA)
