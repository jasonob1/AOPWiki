library(manipulate)
U=10.1 #max length of 10.1 cm (fishbase_pimephales_promulas)
L=0.01 #min set to be 0.01cm (some small value above 0)
logistic <- function(x,k,x0) 1/(1+exp(-k*(x-x0)))
vonbert <- function(t,linf,k,t0) linf*(1-exp(-k*(t-t0)))
exp(vonbert(7/12,5.9,.460,-.86))
manipulate(curve(logistic(x,k,x0), L, U, n=1000,ylab="Survival Prob"), k=slider(0.1,1,.5), x0=slider(0,10,5))
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
34270*30.6
34270*.306
14224*.306
14224*.306*.21
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vonbert(65/365,6.1,.460,-.86)
vonbert(41/365,6.1,.460,-.86)
vb1=c(5.9,.82,-0.10)
vb2=c(6.1,.460,-.86)
vb3=c(6.4,.930,-.05)
vonbert(65/365,vb2)
vonbert(41/365,vb2)
vonbert(65/365,unlist(vb2)
vonbert(41/365,vb2)
# Simulate a population from an initial distribution of sizes
nt0<-723; # set initial number of fish in population
zt0<-rep(1,nt0)# all fish intiially 1mm
zt1<-rep(NA,nt0)# create vector to add new sizes to
vb=list(c(.82,5.9,-.10),c(.46,6.1,-.86),c(.93,6.4,-0.5))
initdist=
for(i in 1:nt0){}
vonbert(65/365,unlist(vb2))
manipulate(vonbert(x,linf,k,t0)x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(x,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365+t0,41/365+t0), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vb1=c(linf=5.9,k=.82,t0=-0.10)
vonbert(41/365,vb1)
vonbert(41/365,flatten(vb1))
vonbert(41/365,unlist(vb1))
unlist(vb1)
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
curve(dnorm(x,mean=15,sd=3),5,35,xlab="Size (mm)",ylab="prob",col="blue")
dist0=rlnorm(1000,0,1)
dist0
plot(dist0)
hist(dist0)
dist0=rlnorm(1000,0,.5)
hist(dist0)
dist0=rlnorm(1000,0,2)
hist(dist0)
dist0=rlnorm(1000,0,.025)
hist(dist0)
exp(1)
no0=1000
dist0=rep(0,no0)
set.bg.black<-function(){
return(par(bg="black"))
}
set.bg.black
set.bg.black()
library(igraph)
##  Set working directory
workingDir <-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" ## Nate's EPA working directory
# workingDir<- "C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" ## Nate's personal comp working directory
setwd(workingDir)
## Identifies location of data files
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all_KEs_plus.txt" # Additional ontology information file
## source() imports custom functions from associated file
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
## Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
## Identify all unique KEs
allKEs<-c(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T)
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
V(AOPg)$name<-keID$KE
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,2]),1] # adds event ID number
V(AOPg)$AOP_ID<-KEPdata[match(V(AOPg)$KE_EID,KEPdata[,3]),1] # finds AOPID to add to V(AOPg) data
acols=colorRampPalette(c("green","red","cyan","orange","magenta","yellow","blue"))
for(i in 1:length(unique(V(AOPg)$AOP_ID))){
V(AOPg)[which(V(AOPg)$AOP_ID==unique(V(AOPg)$AOP_ID)[i])]$acol<-acols(length(unique(V(AOPg)$AOP_ID)))[i]
}
set.seed(1)
plot(AOPg,layout=layout.fruchterman.reingold(AOPg),  vertex.color=V(AOPg)$acol,vertex.label=NA, vertex.size=2, edge.arrow.size=.1)
set.bg.black<-function(x){
if(x==T){
plotlabcol<<-"white"
return(par(bg="black"))}
}
set.bg.black(T)
par(bg="white",xpd=FALSE)
set.seed(1)
plot(AOPg,layout=layout.fruchterman.reingold(AOPg),  vertex.color=V(AOPg)$acol,vertex.label=NA, vertex.size=2, edge.arrow.size=.1)
set.bg.black(T)
set.seed(1)
plot(AOPg,layout=layout.fruchterman.reingold(AOPg),  vertex.color=V(AOPg)$acol,vertex.label=NA, vertex.size=2, edge.arrow.size=.1)
View(acols)
# set.bg.black takes an arguement of true or false and will set the plotting background black and adjust colors for barplot visualizations.
set.bg.black<-function(x){
if(x==T){
plotlabcol<<-"white"
return(par(bg="black"))}
}
V(AOPg)$cc_color<-unlist(color.comps(AOPg,"strong")$vcol)  #color.comps is a custom function stored in the AOP_net_functions.R file
E(AOPg)$cc_color<-unlist(color.comps(AOPg,"strong")$ecol)  #color.comps is a custom function stored in the AOP_net_functions.R file
V(AOPg)$cc_size<-unlist(color.comps(AOPg,"strong")$vsize)
E(AOPg)$cc_width<-unlist(color.comps(AOPg,"strong")$ewidth)
set.seed(1)
plot(AOPg,vertex.size=V(AOPg)$cc_size, edge.width=E(AOPg)$cc_width, vertex.color=V(AOPg)$cc_color, edge.color=E(AOPg)$cc_color,  vertex.size=2, edge.arrow.size=.1, vertex.label=NA)
set.bg.black<-function(x){
if(x==T){
plotlabcol<<-"white"
totdeg<<-c("white","green")
indeg<<-c("white","purple")
outdeg<<-c("white","orange")
bet<<-c("white","purple")
cls<<-c("white","magenta")
ecc<<-c("white","cyan")
return(par(bg="black"))}
}
set.bg.black<-function(x){
if(x==T){
plotlabcol<<-"white"
totdegcol<<-c("white","green")
indegcol<<-c("white","purple")
outdegcol<<-c("white","orange")
betcol<<-c("white","purple")
clscol<<-c("white","magenta")
ecccol<<-c("white","cyan")
return(par(bg="black"))}
else{
plotlabcol<<-"black"
totdegcol<<-c("black","green")
indegcol<<-c("black","purple")
outdegcol<<-c("black","orange")
betcol<<-c("black","purple")
clscol<<-c("black","magenta")
ecccol<<-c("black","cyan")
return(par(bg="white"))}
}
set.bg.black(T)
V(AOPg)$deg_col<-deg.col.grad(AOPg,dmode="all",totdegcol)
## Plot colored and nodes sized by degree
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="all",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
V(AOPg)$deg_col<-deg.col.grad(AOPg,dmode="all",c("black","green"))
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="all",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
V(AOPg)$deg_col<-deg.col.grad(AOPg,dmode="all",c("gray","green"))
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="all",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
V(AOPg)$deg_col<-deg.col.grad(AOPg,dmode="all",c("darkgray","green"))
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="all",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
V(AOPg)$deg_col<-deg.col.grad(AOPg,dmode="all",c("darkgray","green"))
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="all",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
V(AOPg)$deg_col<-deg.col.grad(AOPg,dmode="all",c("gray30","green"))
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="all",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
set.bg.black<-function(x){
if(x==T){
plotlabcol<<-"white"
totdegcol<<-c("gray30","green")
indegcol<<-c("gray30","purple")
outdegcol<<-c("gray30","orange")
betcol<<-c("gray30","purple")
clscol<<-c("gray30","magenta")
ecccol<<-c("gray30","cyan")
return(par(bg="black"))}
else{
plotlabcol<<-"black"
totdegcol<<-c("black","green")
indegcol<<-c("black","purple")
outdegcol<<-c("black","orange")
betcol<<-c("black","purple")
clscol<<-c("black","magenta")
ecccol<<-c("black","cyan")
return(par(bg="white"))}
}
set.bg.black(T)
V(AOPg)$deg_col<-deg.col.grad(AOPg,dmode="all",totdegcol)
## Plot colored and nodes sized by degree
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="all",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
b2gpal=colorRampPalette(totdegcol)
barplot(table(degree(AOPg,mode="all")), xlab="Total Degree", ylab="# of KEs with Total Degree",col.axis="black", col.lab="black",col=b2gpal(max(degree(AOPg,mode="all"))))
legend('topright',legend=rev(seq(min(degree(AOPg,mode="all")),max(degree(AOPg,mode="all")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2gpal(length(rev(seq(min(degree(AOPg,mode="all")),max(degree(AOPg,mode="all")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col="black")
barplot(table(degree(AOPg,mode="all")), xlab="Total Degree", ylab="# of KEs with Total Degree",col.axis=plotlabcol, col.lab=plotlabcol,col=b2gpal(max(degree(AOPg,mode="all"))))
legend('topright',legend=rev(seq(min(degree(AOPg,mode="all")),max(degree(AOPg,mode="all")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2gpal(length(rev(seq(min(degree(AOPg,mode="all")),max(degree(AOPg,mode="all")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col="black")
legend('topright',legend=rev(seq(min(degree(AOPg,mode="all")),max(degree(AOPg,mode="all")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2gpal(length(rev(seq(min(degree(AOPg,mode="all")),max(degree(AOPg,mode="all")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
V(AOPg)$deg_col<-deg.col.grad(AOPg,dmode="in",indegcol)
## Plot colored and nodes sized by degree
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="in",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
## Barplot to show degree histogram
b2ppal=colorRampPalette(indegcol)
barplot(table(degree(AOPg,mode="in")), xlab="In-Degree", ylab="# of KEs with In-Degree",col.axis=plotlabcol, col.lab=plotlabcol,col=b2ppal(max(degree(AOPg,mode="in"))))
legend('topright',legend=rev(seq(min(degree(AOPg,mode="in")),max(degree(AOPg,mode="in")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2ppal(length(rev(seq(min(degree(AOPg,mode="in")),max(degree(AOPg,mode="in")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="in",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
b2ppal=colorRampPalette(indegcol)
barplot(table(degree(AOPg,mode="in")), xlab="In-Degree", ylab="# of KEs with In-Degree",col.axis=plotlabcol, col.lab=plotlabcol,col=b2ppal(max(degree(AOPg,mode="in"))))
legend('topright',legend=rev(seq(min(degree(AOPg,mode="in")),max(degree(AOPg,mode="in")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2ppal(length(rev(seq(min(degree(AOPg,mode="in")),max(degree(AOPg,mode="in")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
V(AOPg)$deg_col<-deg.col.grad(AOPg,dmode="out",outdegcol)
## Plot colored and nodes sized by degree
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="out",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
b2opal=colorRampPalette(c("black","orange"))
barplot(table(degree(AOPg,mode="out")), xlab="Out-Degree", ylab="# of KEs with Out-Degree",col.axis="black", col.lab="black",col=b2opal(max(degree(AOPg,mode="out"))))
legend('topright',legend=rev(seq(min(degree(AOPg,mode="out")),max(degree(AOPg,mode="out")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2opal(length(rev(seq(min(degree(AOPg,mode="out")),max(degree(AOPg,mode="out")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col="black")
b2opal=colorRampPalette(outdegcol)
barplot(table(degree(AOPg,mode="out")), xlab="Out-Degree", ylab="# of KEs with Out-Degree",col.axis=plotlabcol, col.lab=plotlabcol,col=b2opal(max(degree(AOPg,mode="out"))))
legend('topright',legend=rev(seq(min(degree(AOPg,mode="out")),max(degree(AOPg,mode="out")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2opal(length(rev(seq(min(degree(AOPg,mode="out")),max(degree(AOPg,mode="out")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
b2upal=colorRampPalette(betcol)
V(AOPg)$bet_col<-b2upal(20)[as.numeric(cut(betweenness(AOPg,directed=TRUE),breaks = 20))]
## Plot colored and nodes sized by degree
set.seed(1)
plot(AOPg, vertex.size=3000*betweenness(AOPg,normalized=TRUE,directed=T), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
## Betweenness histogram
hist(log10(betweenness(AOPg)),breaks=20,col=b2upal(20), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
## Barplot of betweenness totals with 20 bins
barplot(table(as.numeric(cut(betweenness(AOPg),breaks = 20))),col=b2upal(20),col.axis=plotlabcol, col.lab=plotlabcol)
hist(log10(betweenness(AOPg)),breaks=20,col=b2upal(20), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
set.seed(1)
plot(AOPg, vertex.size=3000*betweenness(AOPg,normalized=TRUE,directed=T), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
hist(log10(betweenness(AOPg)),breaks=20,col=b2upal(20), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
set.bg.black<-function(x){
if(x==T){
plotlabcol<<-"white"
totdegcol<<-c("gray30","green")
indegcol<<-c("gray30","purple")
outdegcol<<-c("gray30","orange")
betcol<<-c("gray30","blue")
clscol<<-c("gray30","magenta")
ecccol<<-c("gray30","cyan")
return(par(bg="black"))}
else{
plotlabcol<<-"black"
totdegcol<<-c("black","green")
indegcol<<-c("black","purple")
outdegcol<<-c("black","orange")
betcol<<-c("black","blue")
clscol<<-c("black","magenta")
ecccol<<-c("black","cyan")
return(par(bg="white"))}
}
b2upal=colorRampPalette(betcol)
V(AOPg)$bet_col<-b2upal(20)[as.numeric(cut(betweenness(AOPg,directed=TRUE),breaks = 20))]
## Plot colored and nodes sized by degree
set.seed(1)
plot(AOPg, vertex.size=3000*betweenness(AOPg,normalized=TRUE,directed=T), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
set.bg.black(T)
b2upal=colorRampPalette(betcol)
V(AOPg)$bet_col<-b2upal(20)[as.numeric(cut(betweenness(AOPg,directed=TRUE),breaks = 20))]
## Plot colored and nodes sized by degree
set.seed(1)
plot(AOPg, vertex.size=3000*betweenness(AOPg,normalized=TRUE,directed=T), vertex.color=V(AOPg)$bet_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
hist(log10(betweenness(AOPg)),breaks=20,col=b2upal(20), col.axis=plotlabcol, col.lab=plotlabcol, xlab=expression(paste("Log"[10],"(Betweeness)","")), main="")
b2mpal=colorRampPalette(clscol)
V(AOPg)$close_col<-b2mpal(1000)[as.numeric(cut(closeness(AOPg,mode="all",norm=TRUE),breaks = 1000))]
set.seed(1)
plot(AOPg, vertex.size=1000*closeness(AOPg,normalized=TRUE,mode="all"), vertex.color=V(AOPg)$close_col, edge.arrow.size=.1, vertex.label=NA)#, vertex.color="orange",edge.color="gray")
plot(closeness(AOPg,mode="all"), xlab="",  col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
plot(closeness(AOPg,mode="all"), xlab="", col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
plot(closeness(AOPg,mode="all"), xlab="", col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="Closeness Value",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
plot(closeness(AOPg,mode="all"), xlab="Key Event", col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="Closeness Value",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
plot(closeness(AOPg,mode="all"), xlab="Key Event", col.axis=plotlabcol, col.lab=plotlabcol, ylab="Closeness Value",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
plot(closeness(AOPg,mode="all"), xlab="Key Event", col.axis=plotlabcol, col.lab=plotlabcol, xaxt='n', ylab="Closeness Value",main="KE Closeness in AOPwiki",col=V(AOPg)$close_col)
b2cpal=colorRampPalette(ecccol)
V(AOPg)$ecc_col<-b2cpal(max(V(AOPg)$ecc)+1)[V(AOPg)$ecc+1]
V(AOPg)$ecc<-eccentricity(AOPg,mode ="all")
b2cpal=colorRampPalette(ecccol)
V(AOPg)$ecc_col<-b2cpal(max(V(AOPg)$ecc)+1)[V(AOPg)$ecc+1]
set.seed(1)
plot(AOPg, vertex.size=4*(V(AOPg)$ecc/max(V(AOPg)$ecc)), vertex.color=V(AOPg)$ecc_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
barplot(table(eccentricity(AOPg,mode ="all")), xlab="Eccentricity", ylab="# of KEs with Eccentricity",col.axis=plotlabcol, col.lab=plotlabcol,col=b2cpal(max(eccentricity(AOPg,mode ="all"))))
legend('topright',legend=rev(seq(min(eccentricity(AOPg,mode ="all")),max(eccentricity(AOPg,mode ="all")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2cpal(length(rev(seq(min(eccentricity(AOPg,mode ="all")),max(eccentricity(AOPg,mode ="all")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
barplot(table(eccentricity(AOPg,mode ="all")), xlab="Eccentricity", ylab="Frequency",col.axis=plotlabcol, col.lab=plotlabcol,col=b2cpal(max(eccentricity(AOPg,mode ="all"))))
legend('topright',legend=rev(seq(min(eccentricity(AOPg,mode ="all")),max(eccentricity(AOPg,mode ="all")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2cpal(length(rev(seq(min(eccentricity(AOPg,mode ="all")),max(eccentricity(AOPg,mode ="all")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
b2gpal=colorRampPalette(totdegcol)
barplot(table(degree(AOPg,mode="all")), xlab="Total Degree", ylab="Frequency",col.axis=plotlabcol, col.lab=plotlabcol,col=b2gpal(max(degree(AOPg,mode="all"))))
legend('topright',legend=rev(seq(min(degree(AOPg,mode="all")),max(degree(AOPg,mode="all")),3)), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=rev(b2gpal(length(rev(seq(min(degree(AOPg,mode="all")),max(degree(AOPg,mode="all")),3))))), pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="white", text.col=plotlabcol)
b2gpal=colorRampPalette(totdegcol)
barplot(table(degree(AOPg,mode="all")), xlab="Total Degree", ylab="Frequency",col.axis=plotlabcol, col.lab=plotlabcol,col=b2gpal(max(degree(AOPg,mode="all"))))
b2ppal=colorRampPalette(indegcol)
barplot(table(degree(AOPg,mode="in")), xlab="In-Degree", ylab="Frequency",col.axis=plotlabcol, col.lab=plotlabcol,col=b2ppal(max(degree(AOPg,mode="in"))))
b2opal=colorRampPalette(outdegcol)
barplot(table(degree(AOPg,mode="out")), xlab="Out-Degree", ylab="# of KEs with Out-Degree",col.axis=plotlabcol, col.lab=plotlabcol,col=b2opal(max(degree(AOPg,mode="out"))))
xx<- barplot(table(V(AOPg)$lobo_o), ylab="# of Key Events", col.axis=plotlabcol, col.lab=plotlabcol, col=tcols, axes=F,names.arg=NA)
text(x=xx, y=10, label=lobo_freqs, cex=.75)
xx<- barplot(table(V(AOPg)$lobo_o), ylab="# of Key Events", col.axis=plotlabcol, col.lab=plotlabcol, col=tcols, axes=F,names.arg=NA)
V(AOPg)$lobo<-KEdata[[4]][match(V(AOPg)$KE_name,KEdata[[2]])]
V(AOPg)$lobo[which(is.na(V(AOPg)$lobo))]<-"" #assigns blank to NA data
tcols=rainbow(length(unique(V(AOPg)$lobo))) #creates a color scheme for visualization
lobo_list=c("Molecular","Cellular","Tissue","Organ","Individual","Population","") #creates an ordering of biological organization
V(AOPg)$lobo_o<-match(V(AOPg)$lobo,lobo_list) #assigns a value of biological organization instead of string.  1=molecular, 2=cellular, ...
lobo_freqs<-table(V(AOPg)$lobo_o)
xx<- barplot(table(V(AOPg)$lobo_o), ylab="# of Key Events", col.axis=plotlabcol, col.lab=plotlabcol, col=tcols, axes=F,names.arg=NA)
text(x=xx, y=10, label=lobo_freqs, cex=.75)
text(x=xx, y=10, label=lobo_freqs, cex=.75 col.lab="white")
text(x=xx, y=10, label=lobo_freqs, cex=.75, col.lab="white")
text(x=xx, y=10, label=lobo_freqs, cex=.75)
xx<- barplot(table(V(AOPg)$lobo_o), ylab="# of Key Events", xlab="Level of organization",col.axis=plotlabcol, col.lab=plotlabcol, col=tcols, axes=F,names.arg=NA)
text(x=xx, y=10, label=lobo_freqs, cex=.75)
xx<- barplot(table(V(AOPg)$lobo_o), ylab="# of Key Events", xlab="Level of biological organization",col.axis=plotlabcol, col.lab=plotlabcol, col=tcols, axes=F,names.arg=NA)
text(x=xx, y=10, label=lobo_freqs, cex=.75)
