surv(0)
surv<-function(z){
return(1/(1+exp(-(-5+2*z))))}
surv(3)
surv<-function(z){
return(1/(1+exp(-(-7+2*z))))}
surv(0)
8604*.5*.42
pars<-c(
##growth
linf=6.1,
k=0.5,
dt=1,
##survival
surv.int=-7,
surv.z=2,
##prob of repro
repr.int=-5,
repr.z=2,
##mean no offspring
offsp=1806.84,
##recruit survival
surv0=0.0009110512
)
#
## Growth function, given you are size z now returns the pdf of size z1 next time
# g_z1z <- function(z1, z, m.par)
# {
#     mu <- m.par["grow.int"] + m.par["grow.z"] * z           # mean size next year
#     sig <- m.par["grow.sd"]                                 # sd about mean
#     p.den.grow <- dnorm(z1, mean = mu, sd = sig)            # pdf that you are size z1 given you were size z
#     return(p.den.grow)
# }
#modified growth using vB mean and proportional SD
g_z1z<-function(z1,z,pars)
{
mu<-linf-(linf-z)*exp(-k*dT)
sig<-mu*.1
p.den.grow<-dnorm(z1,mean=mu,sd=sig)
return(p.den.grow)
}
## Survival function, logistic regression
# s_z <- function(z, m.par)
# {
#     linear.p <- m.par["surv.int"] + m.par["surv.z"] * z       # linear predictor
#     p <- 1/(1+exp(-linear.p))                                 # logistic transformation to probability
#     return(p)
# }
s_z<-function(z,pars)
{
linear.p<-pars["surv.int"] + pars["surv.z"] * z
p<-1/(1+exp(-linear.p))
return(p)
}
## Reproduction function, logistic regression
# pb_z <- function(z, m.par)
# {
#     linear.p <- m.par["repr.int"] + m.par["repr.z"] * z       # linear predictor
#     p <- 1/(1+exp(-linear.p))                                 # logistic transformation to probability
#     return(p)
# }
pb_z<-function(z,pars)
{
linear.p<-pars["repr.int"] + pars["repr.z"] * z
p<-1/(1+exp(-linear.p))
return(p)
}
## Recruitment function (N.B - from birth in spring to first summer), logistic regression
pr_z <- function(pars)
{
p<-surv0                              # logistic transformation to probability
return(p)
}
## Recruit size function
# c_z1z <- function(z1,m.par)
# {
#     mu <- m.par["rcsz.int"] + m.par["rcsz.z"] * z           # mean size of recuits next year
#     sig <- m.par["rcsz.sd"]                                 # sd about mean
#     p.den.rcsz <- dnorm(z1, mean = mu, sd = sig)            # pdf that offspring are size z1 given you were size z
#     return(p.den.rcsz)
# }
c_z1<-function(z1,pars)
{
mu<-linf-(linf-0)*exp(-k*dT0)
sig<-mu*.1
p.den.grow<-dnorm(z1,mean=mu,sd=sig)
return(p.den.grow)
}
P_z1z <- function (z1, z, pars) {
return( s_z(z, pars) * g_z1z(z1, z, pars) )
}
## Define the reproduction kernel
F_z1z <- function (z1, z, pars) {
return( s_z(z, pars) * pb_z(z, pars) * (1/2) * pars[["offsp"]] * pr_z(pars) * c_z1(z1, pars) )
}
## Build the discretized kernel
mk_K <- function(m, pars, L, U) {
# mesh points
h <- (U - L)/m
meshpts <- L + ((1:m) - 1/2) * h
P <- h * (outer(meshpts, meshpts, P_z1z, pars = pars))
F <- h * (outer(meshpts, meshpts, F_z1z, pars = pars))
K <- P + F
return(list(K = K, meshpts = meshpts, P = P, F = F))
}
nBigMatrix <- 100
## check the min/max sizes ever seen
with(sim.data, min(z))
with(sim.data, max(z))
nBigMatrix <- 100
min.size <- 0
max.size <- 6.4
## make our true and estimated projection kernels
#IPM.true <- mk_K(nBigMatrix, m.par.true, min.size, max.size) ## mk_K builds the entire kernel by using multiple built in functions
IPM.est <- mk_K(nBigMatrix, pars, min.size, max.size)
pars<-c(
##growth
linf=6.1,
k=0.5,
dt=1,
##survival
surv.int=-7,
surv.z=2,
##prob of repro
repr.int=-5,
repr.z=2,
##mean no offspring
offsp=1806.84,
##recruit survival
surv0=0.0009110512,
##recruit growth
dT0=.5
)
##
## Define the various demographic functions, we pass a vector of parameters "m.par" to each function
## this makes it easier to compare the results of different paramter sets, say the true values and
## estimated ones
##
## Growth function, given you are size z now returns the pdf of size z1 next time
# g_z1z <- function(z1, z, m.par)
# {
#     mu <- m.par["grow.int"] + m.par["grow.z"] * z           # mean size next year
#     sig <- m.par["grow.sd"]                                 # sd about mean
#     p.den.grow <- dnorm(z1, mean = mu, sd = sig)            # pdf that you are size z1 given you were size z
#     return(p.den.grow)
# }
#modified growth using vB mean and proportional SD
g_z1z<-function(z1,z,pars)
{
mu<-pars[["linf"]]-(pars[["linf"]]-z)*exp(-pars[["k"]]*pars[["dT"]])
sig<-mu*.1
p.den.grow<-dnorm(z1,mean=mu,sd=sig)
return(p.den.grow)
}
## Survival function, logistic regression
# s_z <- function(z, m.par)
# {
#     linear.p <- m.par["surv.int"] + m.par["surv.z"] * z       # linear predictor
#     p <- 1/(1+exp(-linear.p))                                 # logistic transformation to probability
#     return(p)
# }
s_z<-function(z,pars)
{
linear.p<-pars["surv.int"] + pars["surv.z"] * z
p<-1/(1+exp(-linear.p))
return(p)
}
## Reproduction function, logistic regression
# pb_z <- function(z, m.par)
# {
#     linear.p <- m.par["repr.int"] + m.par["repr.z"] * z       # linear predictor
#     p <- 1/(1+exp(-linear.p))                                 # logistic transformation to probability
#     return(p)
# }
pb_z<-function(z,pars)
{
linear.p<-pars["repr.int"] + pars["repr.z"] * z
p<-1/(1+exp(-linear.p))
return(p)
}
## Recruitment function (N.B - from birth in spring to first summer), logistic regression
pr_z <- function(pars)
{
p<-pars[["surv0"]]                              # logistic transformation to probability
return(p)
}
## Recruit size function
# c_z1z <- function(z1,m.par)
# {
#     mu <- m.par["rcsz.int"] + m.par["rcsz.z"] * z           # mean size of recuits next year
#     sig <- m.par["rcsz.sd"]                                 # sd about mean
#     p.den.rcsz <- dnorm(z1, mean = mu, sd = sig)            # pdf that offspring are size z1 given you were size z
#     return(p.den.rcsz)
# }
c_z1<-function(z1,pars)
{
mu<-pars[["linf"]]-(pars[["linf"]]-0)*exp(-pars[["k"]]*pars[["dT0"]])
sig<-mu*.1
p.den.grow<-dnorm(z1,mean=mu,sd=sig)
return(p.den.grow)
}
P_z1z <- function (z1, z, pars) {
return( s_z(z, pars) * g_z1z(z1, z, pars) )
}
## Define the reproduction kernel
F_z1z <- function (z1, z, pars) {
return( s_z(z, pars) * pb_z(z, pars) * (1/2) * pars[["offsp"]] * pr_z(pars) * c_z1(z1, pars) )
}
## Build the discretized kernel
mk_K <- function(m, pars, L, U) {
# mesh points
h <- (U - L)/m
meshpts <- L + ((1:m) - 1/2) * h
P <- h * (outer(meshpts, meshpts, P_z1z, pars = pars))
F <- h * (outer(meshpts, meshpts, F_z1z, pars = pars))
K <- P + F
return(list(K = K, meshpts = meshpts, P = P, F = F))
}
## make our true and estimated projection kernels
#IPM.true <- mk_K(nBigMatrix, m.par.true, min.size, max.size) ## mk_K builds the entire kernel by using multiple built in functions
IPM.est <- mk_K(nBigMatrix, pars, min.size, max.size)
pars<-c(
##growth
linf=6.1,
k=0.5,
dT=1,
##survival
surv.int=-7,
surv.z=2,
##prob of repro
repr.int=-5,
repr.z=2,
##mean no offspring
offsp=1806.84,
##recruit survival
surv0=0.0009110512,
##recruit growth
dT0=.5
)
## make our true and estimated projection kernels
#IPM.true <- mk_K(nBigMatrix, m.par.true, min.size, max.size) ## mk_K builds the entire kernel by using multiple built in functions
IPM.est <- mk_K(nBigMatrix, pars, min.size, max.size)
lam.est <- Re(eigen(IPM.est$K)$values[1])
lam.est
## normalised stable size distribution
w.est <- Re(eigen(IPM.est$K)$vectors[, 1])
stable.z.dist.est <- w.est/sum(w.est)
stable.z.repr.dist.est <- s_z(meshpts, m.par.est) * pb_z(meshpts, m.par.est) * w.est/sum(s_z(meshpts,
m.par.est) * pb_z(meshpts, m.par.est) * w.est)
stable.z.repr.dist.est <- s_z(meshpts, pars) * pb_z(meshpts, pars) * w.est/sum(s_z(meshpts,
pars) * pb_z(meshpts, pars) * w.est)
meshpts <- IPM.est$meshpts
w.est <- Re(eigen(IPM.est$K)$vectors[, 1])
stable.z.dist.est <- w.est/sum(w.est)
stable.z.repr.dist.est <- s_z(meshpts, pars) * pb_z(meshpts, pars) * w.est/sum(s_z(meshpts,
pars) * pb_z(meshpts, pars) * w.est)
mean.z.est <- sum(stable.z.dist.est * meshpts)
mean.z.est
mean.z.repr.est <- sum(stable.z.repr.dist.est * meshpts)
mean.z.repr.est
var.z.est <- sum(stable.z.dist.est * meshpts^2) - mean.z.est^2
var.z.est
mean.z.ari.est <- sum(stable.z.dist.est * exp(meshpts))
mean.z.ari.est
var.z.ari.est <- sum(stable.z.dist.true * exp(2 * meshpts)) - mean.z.ari.est^2
var.z.ari.est
mean.z.ari.est <- sum(stable.z.dist.est * exp(meshpts))
mean.z.ari.est
a0.z.dist.est <- IPM.est$F %*% stable.z.dist.est/lam.est
a1.z.dist.est <- IPM.est$P %*% a0.z.dist.est/lam.est
a2.z.dist.est <- IPM.est$P %*% a1.z.dist.est/lam.est
a3.z.dist.est <- IPM.est$P %*% a2.z.dist.est/lam.est
## build a little helper function to compute the means & variances
mk_moments <- function(z.dist, meshpts) {
z.dist <- z.dist/sum(z.dist)
mean.z <- sum(z.dist * meshpts)
var.z <- sum(z.dist * meshpts^2) - mean.z^2
return(c(mean = mean.z, sd = sqrt(var.z)))
}
postscript(file = "./HowTo/SoaySizeAge.eps", w = 6, h = 6, horizontal = FALSE, onefile = FALSE,
paper = "special")
set_graph_pars(ptype = "panel1")
## age = 0 (new recruits)
z.dist <- z.dist.by.age[[1]]
plot(meshpts, z.dist, type = "n", xlab = "Mass, z", ylab = "Density", xlim = c(1.5, 4.2))
## age = 1, 2, 3 and 4
for (A in 0:4) {
z.dist <- z.dist.by.age[[A + 1]]
lines(meshpts, z.dist)
moments <- round(mk_moments(z.dist, meshpts), 2)
text(x = moments["mean"], y = max(z.dist) + 5e-05, pos = 4, cex = 0.75, labels = paste("A = ",
A, " (mean = ", moments["mean"], ", s.d. = ", moments["sd"], ")", sep = ""))
}
dev.off()
z.dist.by.age <- list()
z.dist.by.age[[1]] <- IPM.est$F %*% stable.z.dist.est/lam.est
for (i in 2:150) z.dist.by.age[[i]] <- IPM.est$P %*% z.dist.by.age[[i - 1]]/lam.est
mk_moments <- function(z.dist, meshpts) {
z.dist <- z.dist/sum(z.dist)
mean.z <- sum(z.dist * meshpts)
var.z <- sum(z.dist * meshpts^2) - mean.z^2
return(c(mean = mean.z, sd = sqrt(var.z)))
}
##
postscript(file = "./HowTo/SoaySizeAge.eps", w = 6, h = 6, horizontal = FALSE, onefile = FALSE,
paper = "special")
set_graph_pars(ptype = "panel1")
## age = 0 (new recruits)
z.dist <- z.dist.by.age[[1]]
plot(meshpts, z.dist, type = "n", xlab = "Mass, z", ylab = "Density", xlim = c(1.5, 4.2))
## age = 1, 2, 3 and 4
for (A in 0:4) {
z.dist <- z.dist.by.age[[A + 1]]
lines(meshpts, z.dist)
moments <- round(mk_moments(z.dist, meshpts), 2)
text(x = moments["mean"], y = max(z.dist) + 5e-05, pos = 4, cex = 0.75, labels = paste("A = ",
A, " (mean = ", moments["mean"], ", s.d. = ", moments["sd"], ")", sep = ""))
}
dev.off()
postscript(file = "test_output.eps", w = 6, h = 6, horizontal = FALSE, onefile = FALSE,
paper = "special")
#set_graph_pars(ptype = "panel1")
## age = 0 (new recruits)
z.dist <- z.dist.by.age[[1]]
plot(meshpts, z.dist, type = "n", xlab = "Mass, z", ylab = "Density", xlim = c(1.5, 4.2))
## age = 1, 2, 3 and 4
for (A in 0:4) {
z.dist <- z.dist.by.age[[A + 1]]
lines(meshpts, z.dist)
moments <- round(mk_moments(z.dist, meshpts), 2)
text(x = moments["mean"], y = max(z.dist) + 5e-05, pos = 4, cex = 0.75, labels = paste("A = ",
A, " (mean = ", moments["mean"], ", s.d. = ", moments["sd"], ")", sep = ""))
}
dev.off()
set_graph_pars <- function(ptype = "panel4",pty="s")
{
mgp <- c(2.5, 1, 0); mar <- c(4, 4, 1.5, 1); oma <- c(0, 0, 0, 0)
switch(ptype,
panel4 = par(mfrow=c(2,2), mgp=mgp, mar=mar, pty=pty,
oma=oma, bty="L", cex.lab =1.2),
panel2 = par(mfrow=c(1,2), mgp=mgp, mar=mar, pty=pty,
oma=oma, bty="L", cex.axis=0.85),
panel1 = par(mfrow=c(1,1), mgp=mgp, mar=mar, pty=pty,
oma=oma, bty="L", cex.axis=0.85))
}
add_panel_label <- function(ltype="a")
{
text <- paste(LETTERS[letters==ltype], ")", sep="")
mtext(text=text, side=3, adj=0)
}
## change to 'TRUE' to look at the formatting...
if (FALSE) {
plot_dummy <- function()
plot(1:100, 1:100, type="n", xlab="x variable", ylab="y variable")
## 4 panels
dev.new(width=8, height=7.5)
set_graph_pars(ptype = "panel4")
plot_dummy(); add_panel_label("a")
plot_dummy(); add_panel_label("b")
plot_dummy(); add_panel_label("c")
plot_dummy(); add_panel_label("d")
## 2 panels
dev.new(width=8, height=4)
set_graph_pars(ptype = "panel2")
plot_dummy(); add_panel_label("a")
plot_dummy(); add_panel_label("b")
## 2 panels
dev.new(width=8, height=4)
set_graph_pars(ptype = "panel1")
plot_dummy()
## clean up
rm(plot_dummy)
}
postscript(file = "test_output.eps", w = 6, h = 6, horizontal = FALSE, onefile = FALSE,
paper = "special")
set_graph_pars(ptype = "panel1")
## age = 0 (new recruits)
z.dist <- z.dist.by.age[[1]]
plot(meshpts, z.dist, type = "n", xlab = "Mass, z", ylab = "Density", xlim = c(1.5, 4.2))
## age = 1, 2, 3 and 4
for (A in 0:4) {
z.dist <- z.dist.by.age[[A + 1]]
lines(meshpts, z.dist)
moments <- round(mk_moments(z.dist, meshpts), 2)
text(x = moments["mean"], y = max(z.dist) + 5e-05, pos = 4, cex = 0.75, labels = paste("A = ",
A, " (mean = ", moments["mean"], ", s.d. = ", moments["sd"], ")", sep = ""))
}
dev.off()
getwd()
defaultPackages()
## Needs igraph package
library(igraph)
#### LOAD PACKAGES AND IMPORT AOPWIKI DATA ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
## Needs igraph package
library(igraph)
#localLibDir<-"C:\\Program Files\\R\\R-3.2.0\\library\\"  #Jason's local library directory
#library(igraph, lib.loc = localLibDir)
##  Set working directory
workingDir<-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" ## Nate's EPA working directory
#workingDir<-"C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" ## Nate's personal comp working directory
# workingDir<-"C:\\Users\\obrienja\\Documents\\GitHub\\AOPWiki\\"
setwd(workingDir)
## Identifies location of data files
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all-KEs-plus.txt" # Additional ontology information file
KEked <- "data/all-KEs-KED.txt" # Additional ontology information file
KERwoe<- "data/all-ke-ker-woe.txt" # WOE for KER
## source() imports custom functions from associated file
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEKdata<-read.table(paste(workingDir, KEked, sep=""), sep="\t", stringsAsFactors=FALSE, header=F)
## Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KEKdata[,2]<-as.numeric(substring(KEKdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
## Identify all unique KEs by looking at all names involved in KERs
allKEs<-append(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T) #This construction has unnessary steps
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
## Add event IDS
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,3]),1] # adds event ID number
V(AOPg)$name<-V(AOPg)$KE_EID #changes default 'name' object to be the KE_EID
## Add AOP IDs. Note: Each KE may belong to more than one AOP, so the AOP_IDs object is a list not just a single AOP ID
for(i in 1:length(V(AOPg))){
if(length(which(!is.na(match(KEPdata[,3],V(AOPg)$KE_EID[i]))))>0){
V(AOPg)[i]$AOP_ID<-list(unique(KEPdata[which(!is.na(match(KEPdata[,3],V(AOPg)[i]$KE_EID))),1]))}
else{V(AOPg)[i]$AOP_ID<-NA}
}
## Add key event designation data
V(AOPg)$KE_KED<-KEKdata[match(V(AOPg)$KE_EID,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPg)$KE_KED[which(is.na(V(AOPg)$KE_KED))]) #The number of KEs without KEDs
V(AOPg)$KE_KED[which(is.na(V(AOPg)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
## Builds AOPwiki network from Edgelist with weights ##
KERWdata<-read.table(paste(workingDir, KERwoe, sep=""), sep="\t", stringsAsFactors=FALSE, header=T)
KERWdata[,2]<-as.numeric(substring(KERWdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KERWdata[,3]<-as.numeric(substring(KERWdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KERWdata[,4]<-as.numeric(substring(KERWdata[,4],14))
##Create igraph object
wKERs<-cbind(as.character(KERWdata[,2]),as.character(KERWdata[,3]))
AOPw<-graph_from_edgelist(wKERs, directed=T)
E(AOPw)$KER_ID<-KERWdata[,7]
E(AOPw)$evidence<-KERWdata[,6]
#E(AOPw)$evidence[which(is.na(E(AOPw)$evidence))]<-3
E(AOPw)$quant<-KERWdata[,7]
#E(AOPw)$quant[which(is.na(E(AOPw)$quant))]<-3
## Remove multiple edges
AOPws<-simplify(AOPw,remove.multiple=T,edge.attr.comb="min")
#plot(AOPws, vertex.label=NA,vertex.size=2,edge.arrow.size=.05, edge.width=3/E(AOPws)$evidence)
## Use event ID # as vertex name attribute
V(AOPws)$name<-as.integer(V(AOPws)$name)
## Add KED data for MIE to AO analysis using weighted edges
V(AOPws)$KE_KED<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]) #The number of KEs without KEDs
V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
## Adds KED coloring to AOPws
V(AOPws)$ked_color<-"Yellow"
V(AOPws)$ked_color[which(V(AOPws)$KE_KED=="MIE")]<-"Green"
V(AOPws)$ked_color[which(V(AOPws)$KE_KED=="AO")]<-"Red"
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
### Import edge weight values from AOPws to AOPg ###
## Builds list of edge names that is used to match edges between AOPws and AOPg
wsEnames<-cbind(names(head_of(AOPws,E(AOPws))),names(tail_of(AOPws,E(AOPws))))
AOPgEnames<-cbind(names(head_of(AOPg,E(AOPg))),names(tail_of(AOPg,E(AOPg))))
## Creates a string from both edges to use in 'match'
wsPairs<-paste(wsEnames[,1],wsEnames[,2])
AOPgPairs<-paste(AOPgEnames[,1],AOPgEnames[,2])
## Assigns evidence values from AOPws to AOPg graph
E(AOPg)$evidence<-E(AOPws)$evidence[charmatch(AOPgPairs,wsPairs)]
length(E(AOPg)$evidence[!is.na(E(AOPg)$evidence)])
mean(E(AOPg)$evidence[!is.na(E(AOPg)$evidence)])
# Assigns NAs a value of 3 for evidence
E(AOPg)$evidence[is.na(E(AOPg)$evidence)]<-3
## Assigns quant values from AOPws to AOPg graph
E(AOPg)$quant<-E(AOPws)$quant[charmatch(AOPgPairs,wsPairs)]
length(E(AOPg)$quant[!is.na(E(AOPg)$quant)])
mean(E(AOPg)$quant[!is.na(E(AOPg)$quant)])
# Assigns NAs a value of 3 for evidence
E(AOPg)$quant[is.na(E(AOPg)$quant)]<-3
### AOP ID from AOPws
V(AOPws)$KE_KED<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
length(V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]) # The number of KEs without KEDs
V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
KEKdata[,1]<-as.numeric(substring(KEKdata[,1],5))
## MIE, KE, and AO coloring assignments
V(AOPg)$ked_color<-"white"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="MIE")]<-"Green"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="AO")]<-"Red"
## ASSIGN AOP IDS TO AOPWS VERTICES #NEEDS TO BE FIXED# ##
#V(AOPws)$AOP_ID<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),1]
#V(AOPws)$AOP_ID
## Set default plotting background color to black
##!! Evaluate as either T or F or plots will not display properly
set.bg.black(F)
isgs<-list()
for(i in 1:length(V(AOPg))){
isgs[[i]]<-induced.subgraph(AOPg,V(AOPg)[1:i])
}
aops<-c()
st=748
for(i in st:length(isgs)){
aops[i]<-aop.paths(isgs[[i]],tot=T)
write.csv(aops,file=paste("results/aoppthcts",st,".csv",sep=""))
}
