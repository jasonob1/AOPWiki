##  Set working directory and import key event relationships
library(igraph)
par(bg="black")
workingDir <-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" #EPA Dir
# workingDir<- "C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" #Personal Dir
setwd(workingDir)
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all_KEs_plus.txt"
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
#Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
##  Identify all unique KEs
allKEs<-c(KERdata[,2],KERdata[,4])
uniqueKEs<-unique(allKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T)
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
V(AOPg)$name<-keID$KE
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,2]),1] # adds event ID number
V(AOPg)$AOP_ID<-KEPdata[match(V(AOPg)$KE_EID,KEPdata[,3]),1] # finds AOPID to add to V(AOPg) data
# This identifies which KEs are included in KERs, but are not themselves included in the KE event listings.
# V(AOPg)$KE_name[which(is.na(V(AOPg)$KE_EID))]
# Plot the AOP wiki, colored by AOP
#acols=topo.colors(length(unique(V(AOPg)$AOP_ID)))
acols=colorRampPalette(c("green","red","cyan","orange","magenta","yellow","blue"))
for(i in 1:length(unique(V(AOPg)$AOP_ID))){
V(AOPg)[which(V(AOPg)$AOP_ID==unique(V(AOPg)$AOP_ID)[i])]$acol<-acols(length(unique(V(AOPg)$AOP_ID)))[i]
}
par(bg="black",xpd=FALSE)
set.seed(1)
plot(AOPg,vertex.color=V(AOPg)$acol,vertex.label=NA, vertex.size=2, edge.arrow.size=.1)
#Calculates number of KE per unique AOP ID
AOP_freqs<-table(V(AOPg)$AOP_ID)
#Histogram of number of KE per unique AOP ID
hist(AOP_freqs,col.axis="white",xlab="# Key Events",ylab="Frequency",col.lab="white",col="white")
#Barplot of number of KE per unique AOP ID with red line to show mean
bp_wcc<-barplot(table(V(AOPg)$AOP_ID),col.axis="white", xlab="AOP ID",ylab="# Key Events",col.lab="white")
abline(h=mean(AOP_freqs),col="red")
#  TASK: WORK ON EDGE COLORING FOR AOP ID
#  edgecombcc<-expand.grid(V(gr)[which(comps$membership==ntcomps[i])],V(gr)[which(comps$membership==ntcomps[i])]) #creates a pairwise list of all nodes in the cc
#  edgecombflat<-as.vector(rbind(edgecombcc[[1]],edgecombcc[[2]])) #flattens the pairwise list to a vector where entries are read pairwise
#  edges.in.cc<-get.edge.ids(gr,edgecombflat,directed=TRUE)
#  E(gr)$color[edges.in.cc]<-cols[[i]]
#### CONNECTED COMPONENTS ANALYSIS ####
## Color vertices and edges by their weakly or strongly connected components.
V(AOPg)$cc_color<-unlist(color.comps(AOPg,"strong")$vcol)  #color.comps is a custom function stored in the AOP_net_functions.R file
E(AOPg)$cc_color<-unlist(color.comps(AOPg,"strong")$ecol)  #color.comps is a custom function stored in the AOP_net_functions.R file
# When the "strong" option is passed to color.comps, vsize and ewidth are calculated and can be used within plot
V(AOPg)$cc_size<-unlist(color.comps(AOPg,"strong")$vsize)
E(AOPg)$cc_width<-unlist(color.comps(AOPg,"strong")$ewidth)
# plot of connected components
par(bg="black")
set.seed(1)
plot(AOPg, vertex.size=V(AOPg)$cc_size, edge.width=E(AOPg)$cc_width, vertex.color=V(AOPg)$cc_color, edge.color=E(AOPg)$cc_color, edge.arrow.size=.1, vertex.label=NA)
## barplot for size of weakly connected components
wcomps<-components(AOPg,mode="weak")
wcc_freqs<-table(wcomps$csize)
bp_wcc<-barplot(table(wcomps$csize),col.axis="white", xlab="Component size",ylab="Frequency",col.lab="white")
# This points out how many of the feedback loops/cycles are contained within the same AOP and how many are a result of the network
scomps<-components(AOPg,mode="strong")
ntcomps<-which(scomps$csize>1) # non-trivial ccs (i.e. with more than 1 node)
V(AOPg)$scc<-scomps$membership # assign the attribute scc to nodes based on their membership
for(i in 1:length(ntcomps)){
print(V(AOPg)[which(V(AOPg)$scc==ntcomps[i])]$AOP_ID)
}
#### Level of biological organization plot ####
## Add level of biological organization for key event nodes
V(AOPg)$lobo<-KEdata[[4]][match(V(AOPg)$KE_name,KEdata[[2]])]
V(AOPg)$lobo[which(is.na(V(AOPg)$lobo))]<-"" #assigns blank to NA data
tcols=rainbow(length(unique(V(AOPg)$lobo))) #creates a color scheme for visualization
lobo_list=c("Molecular","Cellular","Tissue","Organ","Individual","Population","") #creates an ordering of biological organization
V(AOPg)$lobo_o<-match(V(AOPg)$lobo,lobo_list) #assigns a value of biological organization instead of string.  1=molecular, 2=cellular, ...
lobo_freqs<-table(V(AOPg)$lobo_o)
# a plot the AOP wiki using a standard left to right lobo layout.
plot(AOPg, layout=lobo.layout(AOPg),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
legend('topright',c("Molecular","Cellular","Tissue","Organ","Individual","Population","Not Specified"), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=tcols, pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="black", text.col="white")
plot(AOPg, layout=lobo.layout(AOPg),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
legend('topright',c("Molecular","Cellular","Tissue","Organ","Individual","Population","Not Specified"), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=tcols, pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="black", text.col="white")
## Barplot of lobo frequency
par(bg="black")
xx<- barplot(table(V(AOPg)$lobo_o), col=tcols, axes=F,names.arg=NA)
text(x=xx, y=10, label=lobo_freqs, cex=.75)
legend('topright',c("Molecular","Cellular","Tissue","Organ","Individual","Population","Not Specified"), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=tcols, pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="black", text.col="white")
#plot the AOP wiki by lobo info
V(AOPg)$lobo_col<-tcols[V(AOPg)$lobo_o]
set.seed(1)
plot(AOPg ,vertex.size=2, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
plot(AOPg, layout=lobo.layout(AOPg),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
legend('topright',c("Molecular","Cellular","Tissue","Organ","Individual","Population","Not Specified"), pch=22,
col="#777777", xjust=1,yjust=1, pt.bg=tcols, pt.cex=2, cex=.8, bty="n", ncol=1, y.intersp=.5, box.col="black", text.col="white")
plot(AOPg, layout=lobo.layout(AOPg),vertex.size=2,  edge.curved=.3, edge.color="gray", edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$lobo_col)
V(AOPg)$cent_size<-1
V(AOPg)$cent_col<-"white"
# Which key event has the most incident nodes?
sort(degree(AOPg, mode="all"))
V(AOPg)$KE_name[which(V(AOPg)$name==449)]
V(AOPg)$cent_size[which(V(AOPg)$name==345)]<-3
V(AOPg)$cent_col[which(V(AOPg)$name==345)]<-"blue"
## DEGREE ALL VISUALIZATIONS ##
#global degree coloring for network plot
V(AOPg)$deg_col<-deg.col(AOPg,dmode="all")
#colored by degree
plot(AOPg, vertex.size=2, vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
#colored by degree and sized by degree
set.seed(1)
plot(AOPg, vertex.size=500*degree(AOPg,mode="all",normalized=TRUE), vertex.color=V(AOPg)$deg_col, edge.arrow.size=.1, vertex.label=NA, edge.color="gray",edge.width=1)
#barplot to show degree histogram
barplot(table(degree(AOPg,mode="all")), xlab="Degree (all)", ylab="# of KEs with Degree (all)",col.axis="white", col.lab="white",col=rev(heat.colors(max(degree(AOPg,mode="all"))+1)))
sort(degree(AOPg, mode="all"))
tail(degree(AOPg, mode="all")))
tail(degree(AOPg, mode="all")),10)
tail(degree(AOPg, mode="all"),10)
tail(sort(degree(AOPg, mode="all")),10)
V(AOPg)$KE_name[tail(sort(degree(AOPg, mode="all")),10)]
tail(names(sort(degree(AOPg, mode="all")),10))
tail(sort(degree(AOPg, mode="all")),10)
tail(sort(degree(AOPg, mode="all")),10)[,1]
str(tail(sort(degree(AOPg, mode="all")),10))
tail(sort(degree(AOPg, mode="all")),10))$names
tail(sort(degree(AOPg, mode="all")$names),10))
tail(sort(names(degree(AOPg, mode="all"))),10))
tail(sort(degree(AOPg, mode="all"))),10))
tail(sort(degree(AOPg, mode="all"))),10)
tail(sort(degree(AOPg, mode="all")),10)
names(tail(sort(degree(AOPg, mode="all")),10))
as.integer[names(tail(sort(degree(AOPg, mode="all")),10))]
as.integer(names(tail(sort(degree(AOPg, mode="all")),10)))
V(AOPg)$KE_name[as.integer(names(tail(sort(degree(AOPg, mode="all")),10)))]
V(AOPg)$KE_name[V(AOPg)$name==as.integer(names(tail(sort(degree(AOPg, mode="all")),10)))]
V(AOPg)$KE_name[which(V(AOPg)$name==as.integer(names(tail(sort(degree(AOPg, mode="all")),10))))]
match(as.integer(names(tail(sort(degree(AOPg, mode="all")),10)))V(AOPg)$name)
match(as.integer(names(tail(sort(degree(AOPg, mode="all")),10))),V(AOPg)$name)
V(AOPg)$KE_name[match(as.integer(names(tail(sort(degree(AOPg, mode="all")),10))),V(AOPg)$name)]
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(degree(AOPg, mode="all")),10))),V(AOPg)$name)])
rev(as.integer(tail(sort(degree(AOPg, mode="all")),10)))
rev(as.integer(tail(sort(degree(AOPg, mode="in")),10)))
as.integer(names(tail(sort(degree(AOPg, mode="in")),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(degree(AOPg, mode="all")),10))),V(AOPg)$name)])
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(degree(AOPg, mode="in")),10))),V(AOPg)$name)])
rev(as.integer(tail(sort(degree(AOPg, mode="out")),10)))
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(degree(AOPg, mode="out")),10))),V(AOPg)$name)])
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(degree(AOPg, mode="in")),10))),V(AOPg)$name)])
rev(V(AOPg)$KE_ID[match(as.integer(names(tail(sort(degree(AOPg, mode="in")),10))),V(AOPg)$name)])
rev(V(AOPg)$KE_EID[match(as.integer(names(tail(sort(degree(AOPg, mode="in")),10))),V(AOPg)$name)])
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(degree(AOPg, mode="in")),10))),V(AOPg)$name)])
rev(V(AOPg)$KE_EID[match(as.integer(names(tail(sort(degree(AOPg, mode="out")),10))),V(AOPg)$name)])
rev(V(AOPg)$KE_name[match(as.integer(names(tail(sort(degree(AOPg, mode="out")),10))),V(AOPg)$name)])
