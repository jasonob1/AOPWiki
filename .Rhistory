library(manipulate)
U=10.1 #max length of 10.1 cm (fishbase_pimephales_promulas)
L=0.01 #min set to be 0.01cm (some small value above 0)
logistic <- function(x,k,x0) 1/(1+exp(-k*(x-x0)))
vonbert <- function(t,linf,k,t0) linf*(1-exp(-k*(t-t0)))
exp(vonbert(7/12,5.9,.460,-.86))
manipulate(curve(logistic(x,k,x0), L, U, n=1000,ylab="Survival Prob"), k=slider(0.1,1,.5), x0=slider(0,10,5))
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
34270*30.6
34270*.306
14224*.306
14224*.306*.21
manipulate(curve(vonbert(x,linf,k,t0), 0, 5, n=1000,ylab="VB Growth"), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vonbert(65/365,6.1,.460,-.86)
vonbert(41/365,6.1,.460,-.86)
vb1=c(5.9,.82,-0.10)
vb2=c(6.1,.460,-.86)
vb3=c(6.4,.930,-.05)
vonbert(65/365,vb2)
vonbert(41/365,vb2)
vonbert(65/365,unlist(vb2)
vonbert(41/365,vb2)
# Simulate a population from an initial distribution of sizes
nt0<-723; # set initial number of fish in population
zt0<-rep(1,nt0)# all fish intiially 1mm
zt1<-rep(NA,nt0)# create vector to add new sizes to
vb=list(c(.82,5.9,-.10),c(.46,6.1,-.86),c(.93,6.4,-0.5))
initdist=
for(i in 1:nt0){}
vonbert(65/365,unlist(vb2))
manipulate(vonbert(x,linf,k,t0)x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(x,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),x=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(vonbert(t,linf,k,t0),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365+t0,41/365+t0), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
vb1=c(linf=5.9,k=.82,t0=-0.10)
vonbert(41/365,vb1)
vonbert(41/365,flatten(vb1))
vonbert(41/365,unlist(vb1))
unlist(vb1)
manipulate(plot(vonbert(t,linf,k,t0)),t=picker(62/365,41/365), k=picker(.820, .460, .930), linf = picker(5.9,6.1,6.4), t0=picker(-.10,-.86,-.05))
curve(dnorm(x,mean=15,sd=3),5,35,xlab="Size (mm)",ylab="prob",col="blue")
dist0=rlnorm(1000,0,1)
dist0
plot(dist0)
hist(dist0)
dist0=rlnorm(1000,0,.5)
hist(dist0)
dist0=rlnorm(1000,0,2)
hist(dist0)
dist0=rlnorm(1000,0,.025)
hist(dist0)
exp(1)
no0=1000
dist0=rep(0,no0)
227.47+227.47
#### AOP: Import and format network ####
# Name the AOP network
AOP.name<- "Aromatase"
# Specify import files (loads from working directory)
importnetwork <- "data/aromatase_AOP.cyjs"
importnetattr <- "data/aromatase_AOP_data_shortnames.csv"
#Import network as cytoscape object and turn in aop object
#stea_aop <- convert_cytoscape_to_aop("//aa.ad.epa.gov/ORD/DUL/USERS/NPollesc/Net MyDocuments/projects/Pellston_2017/Ed_Anze/Programs/steatosis/Steatosis_AOP/steatosis.cyjs")
AOP_net<-convert_cytoscape_to_aop(paste(workingDir,importnetwork,sep=""))
#Import additional data exported from cytoscape, including node names and event types
#stea_info <- read_csv("//aa.ad.epa.gov/ORD/DUL/USERS/NPollesc/Net MyDocuments/projects/Pellston_2017/Ed_Anze/Programs/steatosis/Steatosis_AOP/stea_nodes.csv")
AOP_data<- read_csv(paste(workingDir,importnetattr,sep=""))
#convert aop object to graphNEL object
AOP_graph <- convert_aop_to_graph(AOP_net)
#convert graphNEL object to igraph object for analysis using igraph package
AOP<-igraph.from.graphNEL(AOP_graph, name = TRUE, weight = TRUE,
unlist.attrs = TRUE)
## ASSIGN NAMES, ATTRIBUTES, and NODE COLORS BY KED
# Assigning names can be tricky, since it depends on how cytoscape exports the network .json file
# V(AOP)names were imported as 'SUID', not 'name', this tells how to match the entries in table_node to the entries in sg graph object by SUID
match(as.character(AOP_data$SUID),V(AOP)$name)
# Assign names to igraph object (note that somehow the node names in V(sg)$name are in descending order, so 'rev' is needed to map actual names properly)
V(AOP)$name<-AOP_data$name[match(V(AOP)$name,as.character(AOP_data$SUID))]
# Assign key event descriptor types (MIE,AO,KE,etc...) And color MIE and AO
V(AOP)$ked<-AOP_data$`Event Type`[match(V(AOP)$name,as.character(AOP_data$name))]
#V(AOP)$KEID<-AOP_data$KEID[match(V(AOP)$name,as.character(AOP_data$name))]
# Assign level of biological organization data from KEPdata sheet in AOP_wiki_analysis file
#V(AOP)$lobo<-KEPdata$Level.of.Organisation[match(V(AOP)$KE_ID,KEPdata$Event)]
#V(AOP)$KE_ID
#V(AOP)$KE_ID[which(is.na(V(AOP)$lobo))]
#match(V(AOP)$KE_ID,KEPdata$Event)
# # Assign KEs with 0 in-degree to be MIE and 0-out-degree to be AO
# indeg<-degree(AOP,mode="in")
# outdeg<-degree(AOP,mode="out")
# indeg
# outdeg
# for (i in 1:length(V(AOP)))
# {if(indeg[i]==0)
#   V(AOP)[i]$KED<-"MIE"
# else V(AOP)[i]$KED<-"KE"
# }
# for (i in 1:length(V(AOP)))
# {if(outdeg[i]==0)
#   V(AOP)[i]$KED<-"AO"
# }
# V(AOP)$name[which(V(AOP)$ked!=V(AOP)$KED)]
#
# V(AOP)$ked[which(V(AOP)$ked!=V(AOP)$KED)]<-V(AOP)$KED[which(V(AOP)$ked!=V(AOP)$KED)]
E(AOP)$color<-"gray"
V(AOP)$color<-"Yellow"
V(AOP)$color[which(V(AOP)$ked=="MIE")]<-"Green"
V(AOP)$color[which(V(AOP)$ked=="AO")]<-"Red"
# # If one wishes to reshape the vertices, these are the igraph shapes
# names(igraph:::.igraph.shapes)
####~ LOAD PACKAGES AND IMPORT AOPWIKI DATA ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
## Needs igraph package
library(igraph)
library(prodlim)
#localLibDir<-"C:\\Program Files\\R\\R-3.2.0\\library\\"  #Jason's local library directory
#library(igraph, lib.loc = localLibDir)
##  Set working directory
workingDir<-"C://Users/NPollesc/Desktop/GitHub/AOPwiki/" ## Nate's EPA working directory
#workingDir<-"C://Users/Nathan Pollesch/Documents/GitHub/AOPWiki/" ## Nate's personal comp working directory
# workingDir<-"C:\\Users\\obrienja\\Documents\\GitHub\\AOPWiki\\"
setwd(workingDir)
## Identifies location of data files
KERimport <- "data/all-KERs.txt"
KEimport <- "data/all-KEs.txt"
KEplus <- "data/all-KEs-plus.txt" # Additional ontology information file
KEked <- "data/all-KEs-KED.txt" # Additional ontology information file
KERwoe<- "data/all-ke-ker-woe.txt" # WOE for KER
## source() imports custom functions from associated file
source(paste(workingDir,"R_files/AOP_net_functions.R",sep="")) #imports custom functions
KERdata<-read.table(paste(workingDir, KERimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEdata<-read.table(paste(workingDir, KEimport, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEPdata<-read.table(paste(workingDir, KEplus, sep=""), sep="\t", stringsAsFactors=FALSE, header=TRUE)
KEKdata<-read.table(paste(workingDir, KEked, sep=""), sep="\t", stringsAsFactors=FALSE, header=F)
## Format KEPdata for easier handling later
KEPdata[,1]<-as.numeric(substring(KEPdata[,1],5)) #strips the characters Aop: from AOPID column and turns the result numeric
KEPdata[,3]<-as.numeric(substring(KEPdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KEKdata[,2]<-as.numeric(substring(KEKdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
## Identify all unique KEs
allKEs<-c(KERdata[,2],KERdata[,4])
#fullKEs<-c(KERdata[,2],KERdata[,4],KERdata[,1])
#length(allKEs)
uniqueKEs<-unique(allKEs)
#uniqueFullKEs<-fullKEs[!duplicated(fullKEs, incomparables = fullKEs[,3])]
#length(uniqueKEs)
#length(uniqueFullKEs)
keID<-data.frame(ID=1:length(uniqueKEs),KE=uniqueKEs)
KERs<-cbind(match(KERdata[,2], keID[,2]),match(KERdata[,4], keID[,2]))
AOPg<-graph_from_edgelist(KERs, directed=T)
## Add names for key event nodes
V(AOPg)$KE_name<-as.character(keID$KE)
## Add event and AOP IDs
V(AOPg)$KE_EID<-KEdata[match(V(AOPg)$KE_name,KEdata[,2]),1] # adds event ID number
V(AOPg)$AOP_ID<-KEPdata[match(V(AOPg)$KE_EID,KEPdata[,3]),1] # finds AOPID to add to V(AOPg) data
V(AOPg)$name<-V(AOPg)$KE_EID
## Add key event designation data
V(AOPg)$KE_KED<-KEKdata[match(V(AOPg)$KE_EID,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
V(AOPg)$KE_KED[which(is.na(V(AOPg)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
## USES AOPws to add evidence and quantitative understanding scores to AOPg
## !! NEEDS AOPws to be initialized below !!
## Uses names to create a pseudo edge list
wsEnames<-cbind(names(head_of(AOPws,E(AOPws))),names(tail_of(AOPws,E(AOPws))))
#f57Enames<-cbind(names(head_of(f57t677,E(f57t677))),names(tail_of(f57t677,E(f57t677))))
AOPgEnames<-cbind(names(head_of(AOPg,E(AOPg))),names(tail_of(AOPg,E(AOPg))))
## For edge pair matching, creates a string from both edges to use in 'match'
wsPairs<-paste(wsEnames[,1],wsEnames[,2])
AOPgPairs<-paste(AOPgEnames[,1],AOPgEnames[,2])
## Assings evidence values from AOPws to AOPg graph
E(AOPg)$evidence<-E(AOPws)$evidence[charmatch(AOPgPairs,wsPairs)]
# Assigns NAs a value of 3 for evidence
E(AOPg)$evidence[is.na(E(AOPg)$evidence)]<-3
## Assings quant values from AOPws to AOPg graph
E(AOPg)$quant<-E(AOPws)$quant[charmatch(AOPgPairs,wsPairs)]
# Assigns NAs a value of 3 for evidence
E(AOPg)$quant[is.na(E(AOPg)$quant)]<-3
E(AOPg)$evidence
E(AOPg)$quant
## Set default plotting background color to black
##!! Evaluate as either T or F or plots will not display properly
set.bg.black(T)
## Identifies which KEs are included in KERs, but are not themselves included in the KE event listings.
# V(AOPg)$KE_name[which(is.na(V(AOPg)$KE_EID))]
#### AOPwiki FROM WOE File and KERs ####
## Build AOP network from WOE file to import WOE data to AOPg
## Import files and format data
KERWdata<-read.table(paste(workingDir, KERwoe, sep=""), sep="\t", stringsAsFactors=FALSE, header=T)
KERWdata[,2]<-as.numeric(substring(KERWdata[,2],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KERWdata[,3]<-as.numeric(substring(KERWdata[,3],7)) #strips the characters Event: from the Event ID column and turns the result numeric
KERWdata[,4]<-as.numeric(substring(KERWdata[,4],14))
##Create igraph object
wKERs<-cbind(as.character(KERWdata[,2]),as.character(KERWdata[,3]))
AOPw<-graph_from_edgelist(wKERs, directed=T)
V(AOPw)$name
E(AOPw)$KER_ID<-KERWdata[,7]
E(AOPw)$evidence<-KERWdata[,6]
E(AOPw)$evidence[which(is.na(E(AOPw)$evidence))]<-3
E(AOPw)$quant<-KERWdata[,7]
E(AOPw)$quant[which(is.na(E(AOPw)$quant))]<-3
## Plot AOPwiki from WOE edgelist
plot(AOPw, vertex.label=NA,vertex.size=2,edge.arrow.size=.05, edge.width=3/E(AOPw)$evidence)
V(AOPw)
## Remove multiple edges
AOPws<-simplify(AOPw,remove.multiple=T,edge.attr.comb="min")
plot(AOPws, vertex.label=NA,vertex.size=2,edge.arrow.size=.05, edge.width=3/E(AOPws)$evidence)
## Use event ID # as vertex name attribute
V(AOPws)$name<-as.integer(V(AOPws)$name)
## Add KED data for MIE to AO analysis using weighted edges
V(AOPws)$KE_KED<-KEKdata[match(V(AOPws)$name,KEKdata[,2]),4] # finds KED (Key Event Designator) to add to V(AOPg) data
V(AOPws)$KE_KED[which(is.na(V(AOPws)$KE_KED))]<-"KE" # ALL KEs without KED (NA values from file) are assigned as generic KE
V(AOPws)$KE_KED
## Uses names to create a pseudo edge list
wsEnames<-cbind(names(head_of(AOPws,E(AOPws))),names(tail_of(AOPws,E(AOPws))))
#f57Enames<-cbind(names(head_of(f57t677,E(f57t677))),names(tail_of(f57t677,E(f57t677))))
AOPgEnames<-cbind(names(head_of(AOPg,E(AOPg))),names(tail_of(AOPg,E(AOPg))))
## For edge pair matching, creates a string from both edges to use in 'match'
wsPairs<-paste(wsEnames[,1],wsEnames[,2])
AOPgPairs<-paste(AOPgEnames[,1],AOPgEnames[,2])
## Assigns evidence values from AOPws to AOPg graph
E(AOPg)$evidence<-E(AOPws)$evidence[charmatch(AOPgPairs,wsPairs)]
# Assigns NAs a value of 3 for evidence
E(AOPg)$evidence[is.na(E(AOPg)$evidence)]<-3
## Assigns quant values from AOPws to AOPg graph
E(AOPg)$quant<-E(AOPws)$quant[charmatch(AOPgPairs,wsPairs)]
# Assigns NAs a value of 3 for evidence
E(AOPg)$quant[is.na(E(AOPg)$quant)]<-3
E(AOPg)$evidence
E(AOPg)$quant
E(AOPg)$asp_clr<-"gray"
E(AOPg)$asp_clr[simple.path.coloring(AOPg,57,677)]<-"purple"
E(AOPg)$asp_size<-1
E(AOPg)$asp_size[simple.path.size(AOPg,57,677)]<-2
set.seed(1)
plot(AOPg ,vertex.size=2, edge.width=E(AOPg)$asp_size, edge.color=E(AOPg)$asp_clr, edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$ked_color)
V(AOPg)$ked_color<-"white"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="MIE")]<-"Green"
V(AOPg)$ked_color[which(V(AOPg)$KE_KED=="AO")]<-"Red"
E(AOPg)$asp_clr<-"gray"
E(AOPg)$asp_clr[simple.path.coloring(AOPg,57,677)]<-"purple"
E(AOPg)$asp_size<-1
E(AOPg)$asp_size[simple.path.size(AOPg,57,677)]<-2
set.seed(1)
plot(AOPg ,vertex.size=2, edge.width=E(AOPg)$asp_size, edge.color=E(AOPg)$asp_clr, edge.arrow.size=.1, vertex.label=NA, vertex.color=V(AOPg)$ked_color)
jpeg.netplot(plot(AOPg ,vertex.size=2, edge.width=E(AOPg)$asp_size, edge.color=E(AOPg)$asp_clr, edge.arrow.size=.3, vertex.label=NA, vertex.color=V(AOPg)$ked_color),"f57t677",seedval=1)
f57t677<-induced_subgraph(AOPg,unique(unlist(all_simple_paths(AOPg, from=57, to=677, mode="out"))))
E(f57t677)$sp_cols<-"gray"
E(f57t677)$sp_cols[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$evidence)]<-"green"
set.seed(1)
plot(f57t677,vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color)
plot(f57t677,layout=topo.layout(f57t677),vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color)
plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.dist=1.18, edge.curved=1, vertex.label.color="white", vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color)
plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.dist=1.18, edge.curved=1, vertex.label.color="white", vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.weight=E(v57t677)$sp_size)
plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.dist=1.18, edge.curved=1, vertex.label.color="white", vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.weight=E(f57t677)$sp_size)
E(f57t677)$sp_size<-1
E(f57t677)$sp_size[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$evidence)]<-2
plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.dist=1.18, edge.curved=1, vertex.label.color="white", vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.weight=E(f57t677)$sp_size)
plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.dist=1.18, edge.curved=1, vertex.label.color="white", vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size)
plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.dist=1.18, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size)
plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=.8,vertex.label.dist=1.18, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size)
plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=.8,vertex.label.dist=1.2, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size)
jpeg.netplot(plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=.8,vertex.label.dist=1.2, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),seedval=1,maii=c(0,0,0,2.1))
jpeg.netplot(plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=.8,vertex.label.dist=1.2, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),"f57t677_ev_sp_topo",seedval=1,maii=c(0,0,0,2.1))
jpeg.netplot(plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=1,vertex.label.dist=1.2, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),"f57t677_ev_sp_topo",seedval=1,maii=c(0,0,0,2.1))
set.seed(1)
plot(f57t677, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size)
set.seed(1)
plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size)
jpeg.netplot(plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_ev_sp",seedval=1,maii=c(0,0,0,2.1))
jpeg.netplot(plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_ev_sp",seedval=1,maii=c(0,0,0,0))
jpeg.netplot(plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.5, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_ev_sp",seedval=1,maii=c(0,0,0,0))
jpeg.netplot(plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_ev_sp",seedval=1,maii=c(0,0,0,0))
all_simple_paths(AOPg, from=57, to=677, mode="out")
length(all_simple_paths(AOPg, from=57, to=677, mode="out"))
jpeg.netplot(plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=1,vertex.label.dist=1.2, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),"f57t677_ev_sp_topo",seedval=1,maii=c(0,0,0,2.1))
E(f57t677)$sp_cols<-"gray"
E(f57t677)$sp_cols[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$quant)]<-"blue"
E(f57t677)$sp_size<-1
E(f57t677)$sp_size[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$quant)]<-2
set.seed(1)
plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size)
jpeg.netplot(plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_ev_sp",seedval=1,maii=c(0,0,0,0))
jpeg.netplot(plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_qu_sp",seedval=1,maii=c(0,0,0,0))
E(f57t677)$sp_cols<-"gray"
E(f57t677)$sp_cols[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$evidence)]<-"green"
E(f57t677)$sp_size<-1
E(f57t677)$sp_size[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$evidence)]<-2
jpeg.netplot(plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_ev_sp",seedval=1,maii=c(0,0,0,0))
E(f57t677)$sp_cols<-"gray"
E(f57t677)$sp_cols[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$quant)]<-"blue"
E(f57t677)$sp_size<-1
E(f57t677)$sp_size[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$quant)]<-2
jpeg.netplot(plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_qu_sp",seedval=1,maii=c(0,0,0,0))
jpeg.netplot(plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=1,vertex.label.dist=1.2, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),"f57t677_ev_sp_topo",seedval=1,maii=c(0,0,0,2.1))
## Export topo.plot for evidence weighted paths
jpeg.netplot(plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=1,vertex.label.dist=1.2, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_qu_sp_topo",seedval=1,maii=c(0,0,0,2.1))
E(f57t677)$sp_cols<-"gray"
E(f57t677)$sp_cols[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$evidence)]<-"green"
E(f57t677)$sp_size<-1
E(f57t677)$sp_size[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$evidence)]<-2
jpeg.netplot(plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=1,vertex.label.dist=1.2, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_ev_sp_topo",seedval=1,maii=c(0,0,0,2.1))
E(f158t241)$sp_cols<-"gray"
E(f158t241)$sp_cols[shortest.path.coloring(f158t241,f=1,t=10)]<-"purple"
E(f57t677)$sp_size<-1
E(f57t677)$sp_size[shortest.path.coloring(f57t677,f=4,t=17,weight=E(f57t677)$quant)]<-2
E(f57t677)$sp_cols<-"gray"
E(f57t677)$sp_cols[shortest.path.coloring(f57t677,f=4,t=17)]<-"orange"
E(f57t677)$sp_size<-1
E(f57t677)$sp_size[shortest.path.coloring(f57t677,f=4,t=17)]<-2
set.seed(1)
plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=.15, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size)
jpeg.netplot(plot(f57t677, vertex.size=10, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_nw_sp",seedval=1,maii=c(0,0,0,0))
## Export topo.plot for evidence weighted paths
jpeg.netplot(plot(f57t677,layout=topo.layout(f57t677),vertex.label.degree=0, vertex.label.cex=1,vertex.label.dist=1.2, edge.curved=1, vertex.label.color="white", vertex.size=7, edge.color=E(f57t677)$sp_cols, edge.arrow.size=1, vertex.label=V(f57t677)$KE_name, vertex.color=V(f57t677)$ked_color,edge.width=E(f57t677)$sp_size),
"f57t677_nw_sp_topo",seedval=1,maii=c(0,0,0,2.1))
plot(f57t677,vertex.size=10, edge.width=E(f57t677)$asp_size, edge.color=E(f57t677)$asp_clr, edge.arrow.size=1,
vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color)
plot(f57t677,vertex.size=10, edge.width=E(f57t677)$asp_size, edge.color=E(f57t677)$asp_clr, edge.arrow.size=.15,
vertex.label=V(f57t677)$name, vertex.color=V(f57t677)$ked_color)
